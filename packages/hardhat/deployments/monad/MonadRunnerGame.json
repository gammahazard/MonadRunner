{
  "address": "0x775dc8Be07165261E1ef6371854F600bb01B24E6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidRelayerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSmartAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegisteredPlayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReplayAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "PlayerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ReplayDataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ScoreSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "SessionScoreSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "SmartAccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "UsernameChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "addRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "highScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timesPlayed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPlayed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MonadRunnerGame.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerScoreHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopScores",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "isAuthorizedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "highScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timesPlayed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPlayed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayerFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayerNoAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccountFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "removeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "replayExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "smartAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "storeReplayDataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScoreFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScoreNoAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "topScores",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsernameFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsernameNoAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2d56ecfb03c570e014077489ea2458af41bbfaba88edb36c5dda2fcee9ec89b",
  "receipt": {
    "to": null,
    "from": "0xe4bD25643625048D2F8657c0dA06EaD4757657B8",
    "contractAddress": "0x775dc8Be07165261E1ef6371854F600bb01B24E6",
    "transactionIndex": 13,
    "gasUsed": "1972631",
    "logsBloom": "0x
    "blockHash": "0xa2b65ce05e86da0a319bc67e6209eead651d84f483339b1c8d11e53e538de237",
    "transactionHash": "0xf2d56ecfb03c570e014077489ea2458af41bbfaba88edb36c5dda2fcee9ec89b",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 7921367,
        "transactionHash": "0xf2d56ecfb03c570e014077489ea2458af41bbfaba88edb36c5dda2fcee9ec89b",
        "address": "0x775dc8Be07165261E1ef6371854F600bb01B24E6",
        "topics": [
          "0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5",
          "0x000000000000000000000000e4bd25643625048d2f8657c0da06ead4757657b8"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xa2b65ce05e86da0a319bc67e6209eead651d84f483339b1c8d11e53e538de237"
      }
    ],
    "blockNumber": 7921367,
    "cumulativeGasUsed": "3041584",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "686a4dc56aee91962380eefebe1a52b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRelayerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSmartAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegisteredPlayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReplayAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ReplayDataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"SessionScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"SmartAccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"UsernameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MonadRunnerGame.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerScoreHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopScores\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isAuthorizedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayerNoAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccountFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"replayExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"smartAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"storeReplayDataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScoreFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScoreNoAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topScores\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsernameFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsernameNoAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.\",\"kind\":\"dev\",\"methods\":{\"registerPlayerFor(address,string)\":{\"details\":\"Register a player on behalf of someone else, requires the caller to be an authorized relayer This function allows session key servers to register new players\"},\"submitScoreFor(address,uint256,bytes32)\":{\"details\":\"Submit a score on behalf of a player, requires the caller to be an authorized relayer This function allows servers with session keys to submit scores for players\"},\"updateUsernameFor(address,string)\":{\"details\":\"Update a player's username on behalf of someone else, requires the caller to be an authorized relayer This function allows session key servers to update usernames\"}},\"title\":\"MonadRunnerGame\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerPlayerNoAuth(address,string)\":{\"notice\":\"Anyone can register any player - no authentication required This allows self-registration without a relayer\"},\"submitScoreNoAuth(address,uint256,bytes32)\":{\"notice\":\"Everyone can submit a score for themselves regardless of who the msg.sender is This allows any player to submit scores without requiring a relayer\"},\"updateUsernameNoAuth(address,string)\":{\"notice\":\"Anyone can update any player's username - no authentication required This allows username updates without a relayer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MonadRunnerGame.sol\":\"MonadRunnerGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MonadRunnerGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MonadRunnerGame\\n * @dev Smart contract for storing Monad Runner game data on-chain,\\n *      including registration of a smart account for account abstraction.\\n *      Optimized for minimal gas usage.\\n */\\ncontract MonadRunnerGame {\\n    // =============== EVENTS ===============\\n    event PlayerRegistered(address indexed playerAddress, string username);\\n    event UsernameChanged(address indexed playerAddress, string newUsername);\\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\\n    event SmartAccountRegistered(address indexed eoa, address smartAccount);\\n    event RelayerAdded(address indexed relayer);\\n    event RelayerRemoved(address indexed relayer);\\n    event SessionScoreSubmitted(address indexed playerAddress, address indexed relayer, uint256 score, bytes32 replayHash);\\n\\n    // =============== STRUCTS ===============\\n    struct Player {\\n        string username;\\n        uint256 highScore;\\n        uint256 timesPlayed;\\n        uint256 lastPlayed;\\n        bool exists;\\n    }\\n\\n    struct GameScore {\\n        address playerAddress;\\n        uint256 score;\\n        uint256 timestamp;\\n        bytes32 replayHash;\\n    }\\n\\n    // =============== CONSTANTS ===============\\n    // Using constant for fixed values saves gas\\n    uint256 private constant MAX_LEADERBOARD_SIZE = 100;\\n    uint256 private constant MAX_USERNAME_LENGTH = 20;\\n    uint256 private constant MAX_PLAYER_SCORE_HISTORY = 10;\\n    \\n\\n    // =============== STATE VARIABLES ===============\\n    // Immutable variables cost less gas than regular state variables\\n    address public immutable owner;\\n    \\n    // Pack related data together when possible\\n    mapping(address => Player) public players;\\n    mapping(address => address) public smartAccounts;\\n    mapping(bytes32 => bool) public replayExists;\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    // Separate mappings for arrays to avoid storage bloat\\n    mapping(address => GameScore[]) private playerScoreHistory;\\n    address[] public playerAddresses;\\n    GameScore[] public topScores;\\n\\n    // =============== CONSTRUCTOR ===============\\n    constructor() {\\n        owner = msg.sender;\\n        // Add the deployer as the first authorized relayer\\n        authorizedRelayers[msg.sender] = true;\\n        emit RelayerAdded(msg.sender);\\n    }\\n\\n    // =============== MODIFIERS ===============\\n    // Use custom errors instead of revert strings to save gas\\n    error OnlyOwner();\\n    error OnlyRegisteredPlayer();\\n    error OnlyAuthorizedRelayer();\\n    error PlayerAlreadyRegistered();\\n    error PlayerDoesNotExist();\\n    error InvalidSmartAccount();\\n    error UsernameTooLong();\\n    error UsernameEmpty();\\n    error ReplayAlreadyExists();\\n    error InvalidRelayerAddress();\\n    error NotAnAuthorizedRelayer();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyRegisteredPlayer() {\\n        if (!players[msg.sender].exists) revert OnlyRegisteredPlayer();\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedRelayer() {\\n        if (!authorizedRelayers[msg.sender]) revert OnlyAuthorizedRelayer();\\n        _;\\n    }\\n\\n    // =============== ADMIN FUNCTIONS ===============\\n    function addRelayer(address relayer) external onlyOwner {\\n        if (relayer == address(0)) revert InvalidRelayerAddress();\\n        authorizedRelayers[relayer] = true;\\n        emit RelayerAdded(relayer);\\n    }\\n\\n    function removeRelayer(address relayer) external onlyOwner {\\n        if (!authorizedRelayers[relayer]) revert NotAnAuthorizedRelayer();\\n        authorizedRelayers[relayer] = false;\\n        emit RelayerRemoved(relayer);\\n    }\\n\\n    // =============== EXTERNAL FUNCTIONS ===============\\n    function registerPlayer(string calldata username) external {\\n        // Using calldata for string parameters saves gas when the function doesn't modify the string\\n        if (players[msg.sender].exists) revert PlayerAlreadyRegistered();\\n        \\n        uint256 len = bytes(username).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n\\n        // Initialize all fields directly to save gas\\n        players[msg.sender] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(msg.sender);\\n        emit PlayerRegistered(msg.sender, username);\\n    }\\n    \\n    /**\\n     * Anyone can register any player - no authentication required\\n     * This allows self-registration without a relayer\\n     */\\n    function registerPlayerNoAuth(address playerAddress, string calldata username) external {\\n        if (players[playerAddress].exists) revert PlayerAlreadyRegistered();\\n        \\n        uint256 len = bytes(username).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n\\n        // Initialize all fields directly to save gas\\n        players[playerAddress] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(playerAddress);\\n        emit PlayerRegistered(playerAddress, username);\\n    }\\n\\n    function updateUsername(string calldata newUsername) external onlyRegisteredPlayer {\\n        uint256 len = bytes(newUsername).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n        \\n        players[msg.sender].username = newUsername;\\n        emit UsernameChanged(msg.sender, newUsername);\\n    }\\n    \\n    /**\\n     * Anyone can update any player's username - no authentication required\\n     * This allows username updates without a relayer\\n     */\\n    function updateUsernameNoAuth(address playerAddress, string calldata newUsername) external {\\n        // Check that the player exists\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        uint256 len = bytes(newUsername).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n        \\n        players[playerAddress].username = newUsername;\\n        emit UsernameChanged(playerAddress, newUsername);\\n    }\\n\\n    function registerSmartAccount(address smartAccount) external onlyRegisteredPlayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        smartAccounts[msg.sender] = smartAccount;\\n        emit SmartAccountRegistered(msg.sender, smartAccount);\\n    }\\n\\n    /**\\n     * @dev Register a player on behalf of someone else, requires the caller to be an authorized relayer\\n     * This function allows session key servers to register new players\\n     */\\n    function registerPlayerFor(address playerAddress, string calldata username) external onlyAuthorizedRelayer {\\n        if (players[playerAddress].exists) revert PlayerAlreadyRegistered();\\n        \\n        uint256 len = bytes(username).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n\\n        // Initialize all fields directly to save gas\\n        players[playerAddress] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(playerAddress);\\n        emit PlayerRegistered(playerAddress, username);\\n    }\\n    \\n    /**\\n     * @dev Update a player's username on behalf of someone else, requires the caller to be an authorized relayer\\n     * This function allows session key servers to update usernames\\n     */\\n    function updateUsernameFor(address playerAddress, string calldata newUsername) external onlyAuthorizedRelayer {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        uint256 len = bytes(newUsername).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n        \\n        players[playerAddress].username = newUsername;\\n        emit UsernameChanged(playerAddress, newUsername);\\n    }\\n\\n    function registerSmartAccountFor(address playerAddress, address smartAccount) external onlyAuthorizedRelayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        \\n        // Require that the player already exists\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        smartAccounts[playerAddress] = smartAccount;\\n        emit SmartAccountRegistered(playerAddress, smartAccount);\\n    }\\n\\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\\n        // Gas optimization: Use storage pointer\\n        Player storage player = players[msg.sender];\\n        \\n        // Unchecked math for gas optimization when overflow is impossible\\n        unchecked {\\n            player.timesPlayed++;\\n        }\\n        \\n        player.lastPlayed = block.timestamp;\\n        \\n        // Only update highScore if needed\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        GameScore memory newScore = GameScore({\\n            playerAddress: msg.sender,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        replayExists[replayHash] = true;\\n        _addToPlayerScoreHistory(msg.sender, newScore);\\n        _updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n    \\n    /**\\n     * Everyone can submit a score for themselves regardless of who the msg.sender is\\n     * This allows any player to submit scores without requiring a relayer\\n     */\\n    function submitScoreNoAuth(address playerAddress, uint256 score, bytes32 replayHash) external {\\n        // Check that the player exists\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        // Gas optimization: Use storage pointer\\n        Player storage player = players[playerAddress];\\n        \\n        // Unchecked math for gas optimization when overflow is impossible\\n        unchecked {\\n            player.timesPlayed++;\\n        }\\n        \\n        player.lastPlayed = block.timestamp;\\n        \\n        // Only update highScore if needed\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        GameScore memory newScore = GameScore({\\n            playerAddress: playerAddress,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        replayExists[replayHash] = true;\\n        _addToPlayerScoreHistory(playerAddress, newScore);\\n        _updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(playerAddress, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(playerAddress, replayHash);\\n    }\\n\\n    /**\\n     * @dev Submit a score on behalf of a player, requires the caller to be an authorized relayer\\n     * This function allows servers with session keys to submit scores for players\\n     */\\n    function submitScoreFor(address playerAddress, uint256 score, bytes32 replayHash) external onlyAuthorizedRelayer {\\n        // Check that the player exists\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        // Gas optimization: Use storage pointer\\n        Player storage player = players[playerAddress];\\n        \\n        // Unchecked math for gas optimization when overflow is impossible\\n        unchecked {\\n            player.timesPlayed++;\\n        }\\n        \\n        player.lastPlayed = block.timestamp;\\n        \\n        // Only update highScore if needed\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        GameScore memory newScore = GameScore({\\n            playerAddress: playerAddress,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        replayExists[replayHash] = true;\\n        _addToPlayerScoreHistory(playerAddress, newScore);\\n        _updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(playerAddress, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(playerAddress, replayHash);\\n        emit SessionScoreSubmitted(playerAddress, msg.sender, score, replayHash);\\n    }\\n    \\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\\n        if (replayExists[replayHash]) revert ReplayAlreadyExists();\\n        replayExists[replayHash] = true;\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    // =============== VIEW FUNCTIONS ===============\\n    function getPlayer(address playerAddress) external view returns (Player memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return players[playerAddress];\\n    }\\n\\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\\n        // Gas optimization: Avoid unnecessary copies\\n        uint256 actualCount = topScores.length;\\n        if (count > actualCount) {\\n            count = actualCount;\\n        }\\n        \\n        GameScore[] memory results = new GameScore[](count);\\n        \\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < count; i++) {\\n                results[i] = topScores[i];\\n            }\\n        }\\n        \\n        return results;\\n    }\\n\\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return playerScoreHistory[playerAddress];\\n    }\\n\\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        uint256 length = topScores.length;\\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (topScores[i].playerAddress == playerAddress) {\\n                    return i + 1;\\n                }\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n\\n    function getPlayerCount() external view returns (uint256) {\\n        return playerAddresses.length;\\n    }\\n\\n    function isAuthorizedRelayer(address relayer) external view returns (bool) {\\n        return authorizedRelayers[relayer];\\n    }\\n\\n    // =============== INTERNAL FUNCTIONS ===============\\n    function _addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\\n        GameScore[] storage history = playerScoreHistory[playerAddress];\\n        uint256 length = history.length;\\n        \\n        if (length >= MAX_PLAYER_SCORE_HISTORY) {\\n            // Shift items to make room (gas optimization using unchecked)\\n            unchecked {\\n                for (uint256 i = 0; i < length - 1; i++) {\\n                    history[i] = history[i + 1];\\n                }\\n            }\\n            history.pop();\\n        }\\n        \\n        history.push(score);\\n    }\\n\\n    function _updateLeaderboard(GameScore memory newScore) internal {\\n        uint256 length = topScores.length;\\n        \\n        if (length < MAX_LEADERBOARD_SIZE) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            topScores.push(GameScore({\\n                playerAddress: address(0),\\n                score: 0,\\n                timestamp: 0,\\n                replayHash: bytes32(0)\\n            }));\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        } else if (newScore.score > topScores[length - 1].score) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length - 1; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        }\\n    }\\n\\n    function _findInsertionPosition(uint256 score) internal view returns (uint256) {\\n        uint256 left = 0;\\n        uint256 right = topScores.length;\\n        \\n        while (left < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (topScores[mid].score > score) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        \\n        return left;\\n    }\\n\\n}\",\"keccak256\":\"0x11c6cca4278982a7dfe392d88f3b5d26d9cc1990f687c3a34f1c8a97086e9a15\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50336080819052600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a26080516121fe61007f600039600081816103330152818161098a015261147601526121fe6000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638dd76194116100f9578063c2e5220611610097578063def8315a11610071578063def8315a14610423578063e0f324d914610436578063e2eb41ff14610462578063ff9a36a61461048657600080fd5b8063c2e52206146103f5578063c96cea70146103fd578063dd39f00d1461041057600080fd5b80639cabb670116100d35780639cabb6701461039b578063a697cb0e146103ae578063b3446f85146103cf578063b9c47022146103e257600080fd5b80638dd7619414610355578063907bcac414610368578063968ffe341461038857600080fd5b80635112711a11610166578063647b3cc011610140578063647b3cc0146102cf578063749a989b146102e257806387369805146103055780638da5cb5b1461032e57600080fd5b80635112711a1461025f5780635c12cd4b1461029c57806360f0a5ac146102bc57600080fd5b806315c6aee2146101ae57806329e295c5146101de5780633834473a146102115780633ceefffc146102265780633eec94381461023957806340f6400a1461024c575b600080fd5b6101c16101bc366004611bf7565b610499565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101ec366004611c2c565b60036020526000908152604090205460ff1681565b60405190151581526020016101d5565b61022461021f366004611c97565b6104c3565b005b610224610234366004611c97565b6104f3565b610224610247366004611c2c565b6105e1565b61022461025a366004611cea565b61069d565b61027261026d366004611bf7565b6107e3565b604080516001600160a01b03909516855260208501939093529183015260608201526080016101d5565b6102af6102aa366004611c2c565b610827565b6040516101d59190611d63565b6102246102ca366004611c2c565b61097f565b6102246102dd366004611db5565b610a4a565b6102016102f0366004611bf7565b60026020526000908152604090205460ff1681565b6101c1610313366004611c2c565b6001602052600090815260409020546001600160a01b031681565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b610224610363366004611bf7565b610b44565b61037b610376366004611c2c565b610bdb565b6040516101d59190611de8565b61037b610396366004611bf7565b610cb5565b6102246103a9366004611cea565b610dce565b6103c16103bc366004611c2c565b610f8a565b6040519081526020016101d5565b6102246103dd366004611e55565b61102c565b6102246103f0366004611c97565b6111de565b6005546103c1565b61022461040b366004611e55565b61139d565b61022461041e366004611c2c565b61146b565b610224610431366004611e97565b611527565b610201610444366004611c2c565b6001600160a01b031660009081526003602052604090205460ff1690565b610475610470366004611c2c565b611641565b6040516101d5959493929190611eb9565b610224610494366004611c97565b6116fb565b600581815481106104a957600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526003602052604090205460ff166104f35760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206004015460ff1661052f57604051632e4bf5e760e21b815260040160405180910390fd5b80600081900361055257604051630b68b9bb60e11b815260040160405180910390fd5b601481111561057457604051637dcc042f60e11b815260040160405180910390fd5b6001600160a01b0384166000908152602081905260409020610597838583611f91565b50836001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e06584846040516105d3929190612052565b60405180910390a250505050565b3360009081526020819052604090206004015460ff1661061457604051637b0e56d560e11b815260040160405180910390fd5b6001600160a01b03811661063b57604051636afdfe6f60e01b815260040160405180910390fd5b3360008181526001602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a250565b6001600160a01b03831660009081526020819052604090206004015460ff166106d957604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0383166000908152602081905260409020600281018054600190810190915542600383015581015483111561071757600181018390555b604080516080810182526001600160a01b038616815260208082018690524282840152606082018590526000858152600290915291909120805460ff19166001179055610764858261172b565b61076d8161188e565b604080518581524260208201529081018490526001600160a01b038616907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a260405183906001600160a01b038716906000805160206121d283398151915290600090a35050505050565b600681815481106107f357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b61085b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526020819052604090206004015460ff1661089757604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090819020815160a081019092528054829082906108c990611f08565b80601f01602080910402602001604051908101604052809291908181526020018280546108f590611f08565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c857604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff16610a015760405163283d0c1360e11b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19169055517f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b9190a250565b3360009081526003602052604090205460ff16610a7a5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b038116610aa157604051636afdfe6f60e01b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090206004015460ff16610add57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0382811660008181526001602090815260409182902080546001600160a01b0319169486169485179055905192835290917fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a25050565b3360009081526020819052604090206004015460ff16610b7757604051637b0e56d560e11b815260040160405180910390fd5b60008181526002602052604090205460ff1615610ba75760405163f54cdc8760e01b815260040160405180910390fd5b600081815260026020526040808220805460ff1916600117905551829133916000805160206121d28339815191529190a350565b6001600160a01b03811660009081526020819052604090206004015460609060ff16610c1a57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015610caa576000848152602090819020604080516080810182526004860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003015460608301529083529092019101610c4d565b505050509050919050565b60065460609080831115610cc7578092505b60008367ffffffffffffffff811115610ce257610ce2611ef2565b604051908082528060200260200182016040528015610d3457816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610d005790505b50905060005b84811015610dc65760068181548110610d5557610d55612081565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260039091015460608201528251839083908110610db357610db3612081565b6020908102919091010152600101610d3a565b509392505050565b3360009081526003602052604090205460ff16610dfe5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206004015460ff16610e3a57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206002810180546001908101909155426003830155810154831115610e7857600181018390555b604080516080810182526001600160a01b038616815260208082018690524282840152606082018590526000858152600290915291909120805460ff19166001179055610ec5858261172b565b610ece8161188e565b604080518581524260208201529081018490526001600160a01b038616907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a260405183906001600160a01b038716906000805160206121d283398151915290600090a3604080518581526020810185905233916001600160a01b038816917f586baf9c6b1490d1110475d16a4b508f7d810bac874b709e6af2dcd02d93e40c910160405180910390a35050505050565b6001600160a01b03811660009081526020819052604081206004015460ff16610fc657604051632e4bf5e760e21b815260040160405180910390fd5b60065460005b8181101561102257836001600160a01b031660068281548110610ff157610ff1612081565b60009182526020909120600490910201546001600160a01b03160361101a576001019392505050565b600101610fcc565b5060009392505050565b3360009081526020819052604090206004015460ff16156110605760405163ab5ac72b60e01b815260040160405180910390fd5b80600081900361108357604051630b68b9bb60e11b815260040160405180910390fd5b60148111156110a557604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040808401839052606084018390526001608090940193909352338252819052208151819061111f9082612097565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906111d19086908690612052565b60405180910390a2505050565b6001600160a01b03831660009081526020819052604090206004015460ff161561121b5760405163ab5ac72b60e01b815260040160405180910390fd5b80600081900361123e57604051630b68b9bb60e11b815260040160405180910390fd5b601481111561126057604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830182905260408084018390526060840183905260016080909401939093526001600160a01b038816825281905220815181906112e39082612097565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03871690811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906105d39086908690612052565b3360009081526020819052604090206004015460ff166113d057604051637b0e56d560e11b815260040160405180910390fd5b8060008190036113f357604051630b68b9bb60e11b815260040160405180910390fd5b601481111561141557604051637dcc042f60e11b815260040160405180910390fd5b33600090815260208190526040902061142f838583611f91565b50336001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e06584846040516111d1929190612052565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114b457604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166114db5760405163fe16c3c560e01b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a250565b3360009081526020819052604090206004015460ff1661155a57604051637b0e56d560e11b815260040160405180910390fd5b336000908152602081905260409020600281018054600190810190915542600383015581015483111561158f57600181018390555b604080516080810182523380825260208083018790524283850152606083018690526000868152600290915292909220805460ff19166001179055906115d5908261172b565b6115de8161188e565b6040805185815242602082015290810184905233907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a2604051839033906000805160206121d283398151915290600090a350505050565b60006020819052908152604090208054819061165c90611f08565b80601f016020809104026020016040519081016040528092919081815260200182805461168890611f08565b80156116d55780601f106116aa576101008083540402835291602001916116d5565b820191906000526020600020905b8154815290600101906020018083116116b857829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b3360009081526003602052604090205460ff166111de5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03821660009081526004602052604090208054600a81106118305760005b600182038110156117e75782816001018154811061177057611770612081565b906000526020600020906004020183828154811061179057611790612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808301548183015560028084015490830155600392830154929091019190915501611750565b50818054806117f8576117f8612157565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590555b508054600180820183556000928352602092839020845160049093020180546001600160a01b0319166001600160a01b0390931692909217825591830151918101919091556040820151600282015560609091015160039091015550565b6006546064811015611a945760006118a98360200151611b7d565b604080516080810182526000808252602082018181529282018181526060830182815260068054600181018255935292517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490930292830180546001600160a01b0319166001600160a01b0390921691909117905592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42909101559050815b81811115611a2a57600660018203815481106119b4576119b4612081565b9060005260206000209060040201600682815481106119d5576119d5612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611996565b508260068281548110611a3f57611a3f612081565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600182015560408201516002820155606090910151600390910155505050565b6006611aa1600183612183565b81548110611ab157611ab1612081565b90600052602060002090600402016001015482602001511115611b79576000611add8360200151611b7d565b905060001982015b81811115611a2a5760066001820381548110611b0357611b03612081565b906000526020600020906004020160068281548110611b2457611b24612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611ae5565b5050565b60065460009081905b80821015611bf05760006002611b9c838561219c565b611ba691906121af565b90508460068281548110611bbc57611bbc612081565b9060005260206000209060040201600101541115611be657611bdf81600161219c565b9250611bea565b8091505b50611b86565b5092915050565b600060208284031215611c0957600080fd5b5035919050565b80356001600160a01b0381168114611c2757600080fd5b919050565b600060208284031215611c3e57600080fd5b611c4782611c10565b9392505050565b60008083601f840112611c6057600080fd5b50813567ffffffffffffffff811115611c7857600080fd5b602083019150836020828501011115611c9057600080fd5b9250929050565b600080600060408486031215611cac57600080fd5b611cb584611c10565b9250602084013567ffffffffffffffff811115611cd157600080fd5b611cdd86828701611c4e565b9497909650939450505050565b600080600060608486031215611cff57600080fd5b611d0884611c10565b95602085013595506040909401359392505050565b6000815180845260005b81811015611d4357602081850181015186830182015201611d27565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a06020840152611d7f60c0840182611d1d565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b60008060408385031215611dc857600080fd5b611dd183611c10565b9150611ddf60208401611c10565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611e4857815180516001600160a01b03168552868101518786015285810151868601526060908101519085015260809093019290850190600101611e05565b5091979650505050505050565b60008060208385031215611e6857600080fd5b823567ffffffffffffffff811115611e7f57600080fd5b611e8b85828601611c4e565b90969095509350505050565b60008060408385031215611eaa57600080fd5b50508035926020909101359150565b60a081526000611ecc60a0830188611d1d565b905085602083015284604083015283606083015282151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611f1c57607f821691505b602082108103611f3c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f8c57600081815260208120601f850160051c81016020861015611f695750805b601f850160051c820191505b81811015611f8857828155600101611f75565b5050505b505050565b67ffffffffffffffff831115611fa957611fa9611ef2565b611fbd83611fb78354611f08565b83611f42565b6000601f841160018114611ff15760008515611fd95750838201355b600019600387901b1c1916600186901b17835561204b565b600083815260209020601f19861690835b828110156120225786850135825560209485019460019092019101612002565b508682101561203f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b815167ffffffffffffffff8111156120b1576120b1611ef2565b6120c5816120bf8454611f08565b84611f42565b602080601f8311600181146120fa57600084156120e25750858301515b600019600386901b1c1916600185901b178555611f88565b600085815260208120601f198616915b828110156121295788860151825594840194600190910190840161210a565b50858210156121475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156121965761219661216d565b92915050565b808201808211156121965761219661216d565b6000826121cc57634e487b7160e01b600052601260045260246000fd5b50049056fe5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28da164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638dd76194116100f9578063c2e5220611610097578063def8315a11610071578063def8315a14610423578063e0f324d914610436578063e2eb41ff14610462578063ff9a36a61461048657600080fd5b8063c2e52206146103f5578063c96cea70146103fd578063dd39f00d1461041057600080fd5b80639cabb670116100d35780639cabb6701461039b578063a697cb0e146103ae578063b3446f85146103cf578063b9c47022146103e257600080fd5b80638dd7619414610355578063907bcac414610368578063968ffe341461038857600080fd5b80635112711a11610166578063647b3cc011610140578063647b3cc0146102cf578063749a989b146102e257806387369805146103055780638da5cb5b1461032e57600080fd5b80635112711a1461025f5780635c12cd4b1461029c57806360f0a5ac146102bc57600080fd5b806315c6aee2146101ae57806329e295c5146101de5780633834473a146102115780633ceefffc146102265780633eec94381461023957806340f6400a1461024c575b600080fd5b6101c16101bc366004611bf7565b610499565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101ec366004611c2c565b60036020526000908152604090205460ff1681565b60405190151581526020016101d5565b61022461021f366004611c97565b6104c3565b005b610224610234366004611c97565b6104f3565b610224610247366004611c2c565b6105e1565b61022461025a366004611cea565b61069d565b61027261026d366004611bf7565b6107e3565b604080516001600160a01b03909516855260208501939093529183015260608201526080016101d5565b6102af6102aa366004611c2c565b610827565b6040516101d59190611d63565b6102246102ca366004611c2c565b61097f565b6102246102dd366004611db5565b610a4a565b6102016102f0366004611bf7565b60026020526000908152604090205460ff1681565b6101c1610313366004611c2c565b6001602052600090815260409020546001600160a01b031681565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b610224610363366004611bf7565b610b44565b61037b610376366004611c2c565b610bdb565b6040516101d59190611de8565b61037b610396366004611bf7565b610cb5565b6102246103a9366004611cea565b610dce565b6103c16103bc366004611c2c565b610f8a565b6040519081526020016101d5565b6102246103dd366004611e55565b61102c565b6102246103f0366004611c97565b6111de565b6005546103c1565b61022461040b366004611e55565b61139d565b61022461041e366004611c2c565b61146b565b610224610431366004611e97565b611527565b610201610444366004611c2c565b6001600160a01b031660009081526003602052604090205460ff1690565b610475610470366004611c2c565b611641565b6040516101d5959493929190611eb9565b610224610494366004611c97565b6116fb565b600581815481106104a957600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526003602052604090205460ff166104f35760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206004015460ff1661052f57604051632e4bf5e760e21b815260040160405180910390fd5b80600081900361055257604051630b68b9bb60e11b815260040160405180910390fd5b601481111561057457604051637dcc042f60e11b815260040160405180910390fd5b6001600160a01b0384166000908152602081905260409020610597838583611f91565b50836001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e06584846040516105d3929190612052565b60405180910390a250505050565b3360009081526020819052604090206004015460ff1661061457604051637b0e56d560e11b815260040160405180910390fd5b6001600160a01b03811661063b57604051636afdfe6f60e01b815260040160405180910390fd5b3360008181526001602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a250565b6001600160a01b03831660009081526020819052604090206004015460ff166106d957604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0383166000908152602081905260409020600281018054600190810190915542600383015581015483111561071757600181018390555b604080516080810182526001600160a01b038616815260208082018690524282840152606082018590526000858152600290915291909120805460ff19166001179055610764858261172b565b61076d8161188e565b604080518581524260208201529081018490526001600160a01b038616907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a260405183906001600160a01b038716906000805160206121d283398151915290600090a35050505050565b600681815481106107f357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b61085b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526020819052604090206004015460ff1661089757604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090819020815160a081019092528054829082906108c990611f08565b80601f01602080910402602001604051908101604052809291908181526020018280546108f590611f08565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c857604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff16610a015760405163283d0c1360e11b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19169055517f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b9190a250565b3360009081526003602052604090205460ff16610a7a5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b038116610aa157604051636afdfe6f60e01b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090206004015460ff16610add57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0382811660008181526001602090815260409182902080546001600160a01b0319169486169485179055905192835290917fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a25050565b3360009081526020819052604090206004015460ff16610b7757604051637b0e56d560e11b815260040160405180910390fd5b60008181526002602052604090205460ff1615610ba75760405163f54cdc8760e01b815260040160405180910390fd5b600081815260026020526040808220805460ff1916600117905551829133916000805160206121d28339815191529190a350565b6001600160a01b03811660009081526020819052604090206004015460609060ff16610c1a57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015610caa576000848152602090819020604080516080810182526004860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003015460608301529083529092019101610c4d565b505050509050919050565b60065460609080831115610cc7578092505b60008367ffffffffffffffff811115610ce257610ce2611ef2565b604051908082528060200260200182016040528015610d3457816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610d005790505b50905060005b84811015610dc65760068181548110610d5557610d55612081565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260039091015460608201528251839083908110610db357610db3612081565b6020908102919091010152600101610d3a565b509392505050565b3360009081526003602052604090205460ff16610dfe5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206004015460ff16610e3a57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206002810180546001908101909155426003830155810154831115610e7857600181018390555b604080516080810182526001600160a01b038616815260208082018690524282840152606082018590526000858152600290915291909120805460ff19166001179055610ec5858261172b565b610ece8161188e565b604080518581524260208201529081018490526001600160a01b038616907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a260405183906001600160a01b038716906000805160206121d283398151915290600090a3604080518581526020810185905233916001600160a01b038816917f586baf9c6b1490d1110475d16a4b508f7d810bac874b709e6af2dcd02d93e40c910160405180910390a35050505050565b6001600160a01b03811660009081526020819052604081206004015460ff16610fc657604051632e4bf5e760e21b815260040160405180910390fd5b60065460005b8181101561102257836001600160a01b031660068281548110610ff157610ff1612081565b60009182526020909120600490910201546001600160a01b03160361101a576001019392505050565b600101610fcc565b5060009392505050565b3360009081526020819052604090206004015460ff16156110605760405163ab5ac72b60e01b815260040160405180910390fd5b80600081900361108357604051630b68b9bb60e11b815260040160405180910390fd5b60148111156110a557604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040808401839052606084018390526001608090940193909352338252819052208151819061111f9082612097565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906111d19086908690612052565b60405180910390a2505050565b6001600160a01b03831660009081526020819052604090206004015460ff161561121b5760405163ab5ac72b60e01b815260040160405180910390fd5b80600081900361123e57604051630b68b9bb60e11b815260040160405180910390fd5b601481111561126057604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830182905260408084018390526060840183905260016080909401939093526001600160a01b038816825281905220815181906112e39082612097565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03871690811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906105d39086908690612052565b3360009081526020819052604090206004015460ff166113d057604051637b0e56d560e11b815260040160405180910390fd5b8060008190036113f357604051630b68b9bb60e11b815260040160405180910390fd5b601481111561141557604051637dcc042f60e11b815260040160405180910390fd5b33600090815260208190526040902061142f838583611f91565b50336001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e06584846040516111d1929190612052565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114b457604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166114db5760405163fe16c3c560e01b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a250565b3360009081526020819052604090206004015460ff1661155a57604051637b0e56d560e11b815260040160405180910390fd5b336000908152602081905260409020600281018054600190810190915542600383015581015483111561158f57600181018390555b604080516080810182523380825260208083018790524283850152606083018690526000868152600290915292909220805460ff19166001179055906115d5908261172b565b6115de8161188e565b6040805185815242602082015290810184905233907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a2604051839033906000805160206121d283398151915290600090a350505050565b60006020819052908152604090208054819061165c90611f08565b80601f016020809104026020016040519081016040528092919081815260200182805461168890611f08565b80156116d55780601f106116aa576101008083540402835291602001916116d5565b820191906000526020600020905b8154815290600101906020018083116116b857829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b3360009081526003602052604090205460ff166111de5760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03821660009081526004602052604090208054600a81106118305760005b600182038110156117e75782816001018154811061177057611770612081565b906000526020600020906004020183828154811061179057611790612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808301548183015560028084015490830155600392830154929091019190915501611750565b50818054806117f8576117f8612157565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590555b508054600180820183556000928352602092839020845160049093020180546001600160a01b0319166001600160a01b0390931692909217825591830151918101919091556040820151600282015560609091015160039091015550565b6006546064811015611a945760006118a98360200151611b7d565b604080516080810182526000808252602082018181529282018181526060830182815260068054600181018255935292517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490930292830180546001600160a01b0319166001600160a01b0390921691909117905592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42909101559050815b81811115611a2a57600660018203815481106119b4576119b4612081565b9060005260206000209060040201600682815481106119d5576119d5612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611996565b508260068281548110611a3f57611a3f612081565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600182015560408201516002820155606090910151600390910155505050565b6006611aa1600183612183565b81548110611ab157611ab1612081565b90600052602060002090600402016001015482602001511115611b79576000611add8360200151611b7d565b905060001982015b81811115611a2a5760066001820381548110611b0357611b03612081565b906000526020600020906004020160068281548110611b2457611b24612081565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611ae5565b5050565b60065460009081905b80821015611bf05760006002611b9c838561219c565b611ba691906121af565b90508460068281548110611bbc57611bbc612081565b9060005260206000209060040201600101541115611be657611bdf81600161219c565b9250611bea565b8091505b50611b86565b5092915050565b600060208284031215611c0957600080fd5b5035919050565b80356001600160a01b0381168114611c2757600080fd5b919050565b600060208284031215611c3e57600080fd5b611c4782611c10565b9392505050565b60008083601f840112611c6057600080fd5b50813567ffffffffffffffff811115611c7857600080fd5b602083019150836020828501011115611c9057600080fd5b9250929050565b600080600060408486031215611cac57600080fd5b611cb584611c10565b9250602084013567ffffffffffffffff811115611cd157600080fd5b611cdd86828701611c4e565b9497909650939450505050565b600080600060608486031215611cff57600080fd5b611d0884611c10565b95602085013595506040909401359392505050565b6000815180845260005b81811015611d4357602081850181015186830182015201611d27565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a06020840152611d7f60c0840182611d1d565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b60008060408385031215611dc857600080fd5b611dd183611c10565b9150611ddf60208401611c10565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611e4857815180516001600160a01b03168552868101518786015285810151868601526060908101519085015260809093019290850190600101611e05565b5091979650505050505050565b60008060208385031215611e6857600080fd5b823567ffffffffffffffff811115611e7f57600080fd5b611e8b85828601611c4e565b90969095509350505050565b60008060408385031215611eaa57600080fd5b50508035926020909101359150565b60a081526000611ecc60a0830188611d1d565b905085602083015284604083015283606083015282151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611f1c57607f821691505b602082108103611f3c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f8c57600081815260208120601f850160051c81016020861015611f695750805b601f850160051c820191505b81811015611f8857828155600101611f75565b5050505b505050565b67ffffffffffffffff831115611fa957611fa9611ef2565b611fbd83611fb78354611f08565b83611f42565b6000601f841160018114611ff15760008515611fd95750838201355b600019600387901b1c1916600186901b17835561204b565b600083815260209020601f19861690835b828110156120225786850135825560209485019460019092019101612002565b508682101561203f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b815167ffffffffffffffff8111156120b1576120b1611ef2565b6120c5816120bf8454611f08565b84611f42565b602080601f8311600181146120fa57600084156120e25750858301515b600019600386901b1c1916600185901b178555611f88565b600085815260208120601f198616915b828110156121295788860151825594840194600190910190840161210a565b50858210156121475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156121965761219661216d565b92915050565b808201808211156121965761219661216d565b6000826121cc57634e487b7160e01b600052601260045260246000fd5b50049056fe5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28da164736f6c6343000814000a",
  "devdoc": {
    "details": "Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.",
    "kind": "dev",
    "methods": {
      "registerPlayerFor(address,string)": {
        "details": "Register a player on behalf of someone else, requires the caller to be an authorized relayer This function allows session key servers to register new players"
      },
      "submitScoreFor(address,uint256,bytes32)": {
        "details": "Submit a score on behalf of a player, requires the caller to be an authorized relayer This function allows servers with session keys to submit scores for players"
      },
      "updateUsernameFor(address,string)": {
        "details": "Update a player's username on behalf of someone else, requires the caller to be an authorized relayer This function allows session key servers to update usernames"
      }
    },
    "title": "MonadRunnerGame",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerPlayerNoAuth(address,string)": {
        "notice": "Anyone can register any player - no authentication required This allows self-registration without a relayer"
      },
      "submitScoreNoAuth(address,uint256,bytes32)": {
        "notice": "Everyone can submit a score for themselves regardless of who the msg.sender is This allows any player to submit scores without requiring a relayer"
      },
      "updateUsernameNoAuth(address,string)": {
        "notice": "Anyone can update any player's username - no authentication required This allows username updates without a relayer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 90,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Player)65_storage)"
      },
      {
        "astId": 94,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "smartAccounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 98,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "replayExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 102,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "authorizedRelayers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 108,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerScoreHistory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(GameScore)74_storage)dyn_storage)"
      },
      {
        "astId": 111,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 115,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "topScores",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(GameScore)74_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GameScore)74_storage)dyn_storage": {
        "base": "t_struct(GameScore)74_storage",
        "encoding": "dynamic_array",
        "label": "struct MonadRunnerGame.GameScore[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(GameScore)74_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.GameScore[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(GameScore)74_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Player)65_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)65_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameScore)74_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.GameScore",
        "members": [
          {
            "astId": 67,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 69,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "score",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 73,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "replayHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)65_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.Player",
        "members": [
          {
            "astId": 56,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 58,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "highScore",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 60,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timesPlayed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 62,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "lastPlayed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 64,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}