{
  "address": "0xb59916B6C83982609329a22923b54EB4FbC31EF9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "PlayerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ReplayDataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ScoreSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "SmartAccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "UsernameChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LEADERBOARD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PLAYER_SCORE_HISTORY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_USERNAME_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "highScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timesPlayed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPlayed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MonadRunnerGame.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerScoreHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopScores",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerScoreHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "highScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timesPlayed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPlayed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "replayExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "smartAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "storeReplayDataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "topScores",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8ac25b71acc1b8ae2dac12920d7b43222bc85e75e38913d88a14363ada6179f",
  "receipt": {
    "to": null,
    "from": "0xe4bD25643625048D2F8657c0dA06EaD4757657B8",
    "contractAddress": "0xb59916B6C83982609329a22923b54EB4FbC31EF9",
    "transactionIndex": 40,
    "gasUsed": "1483005",
    "logsBloom": "0x
    "blockHash": "0x4b3b5dffa990523bc51dcb3e406a25eb1d8a36201aae6e3d769c6ab4514ba9a9",
    "transactionHash": "0xb8ac25b71acc1b8ae2dac12920d7b43222bc85e75e38913d88a14363ada6179f",
    "logs": [],
    "blockNumber": 7538760,
    "cumulativeGasUsed": "5347463",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "962328a980042e58a7a068ed849e96bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ReplayDataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"SmartAccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"UsernameChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LEADERBOARD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PLAYER_SCORE_HISTORY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_USERNAME_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MonadRunnerGame.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerScoreHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopScores\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerScoreHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"replayExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"smartAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"storeReplayDataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topScores\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.\",\"kind\":\"dev\",\"methods\":{\"getPlayer(address)\":{\"details\":\"Get player information.\",\"params\":{\"playerAddress\":\"The address of the player.\"},\"returns\":{\"_0\":\"Player data struct.\"}},\"getPlayerCount()\":{\"details\":\"Get total number of registered players.\",\"returns\":{\"_0\":\"Number of players.\"}},\"getPlayerRank(address)\":{\"details\":\"Get a player's rank on the leaderboard.\",\"params\":{\"playerAddress\":\"The address of the player.\"},\"returns\":{\"_0\":\"Player rank (1-based) or 0 if not on leaderboard.\"}},\"getPlayerScoreHistory(address)\":{\"details\":\"Get a player's score history.\",\"params\":{\"playerAddress\":\"The address of the player.\"},\"returns\":{\"_0\":\"Array of GameScore structs.\"}},\"getTopScores(uint256)\":{\"details\":\"Get the top scores (leaderboard).\",\"params\":{\"count\":\"Number of top scores to retrieve.\"},\"returns\":{\"_0\":\"Array of GameScore structs.\"}},\"registerPlayer(string)\":{\"details\":\"Register a new player with a username.\",\"params\":{\"username\":\"The player's username.\"}},\"registerSmartAccount(address)\":{\"details\":\"Register the smart account address associated with a player's EOA.\",\"params\":{\"smartAccount\":\"The smart account address.\"}},\"storeReplayDataHash(bytes32)\":{\"details\":\"Store replay data hash - allows verification of off-chain replay data.\",\"params\":{\"replayHash\":\"Hash of the replay data.\"}},\"submitScore(uint256,bytes32)\":{\"details\":\"Submit a game score.\",\"params\":{\"replayHash\":\"Hash of the replay data.\",\"score\":\"The score achieved.\"}},\"updateUsername(string)\":{\"details\":\"Update player's username.\",\"params\":{\"newUsername\":\"The new username.\"}}},\"title\":\"MonadRunnerGame\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MonadRunnerGame.sol\":\"MonadRunnerGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MonadRunnerGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MonadRunnerGame\\n * @dev Smart contract for storing Monad Runner game data on-chain,\\n *      including registration of a smart account for account abstraction.\\n */\\ncontract MonadRunnerGame {\\n    // =============== EVENTS ===============\\n    event PlayerRegistered(address indexed playerAddress, string username);\\n    event UsernameChanged(address indexed playerAddress, string newUsername);\\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\\n    event SmartAccountRegistered(address indexed eoa, address smartAccount);\\n\\n    // =============== STRUCTS ===============\\n    struct Player {\\n        string username;\\n        uint256 highScore;\\n        uint256 timesPlayed;\\n        uint256 lastPlayed;\\n        bool exists;\\n    }\\n\\n    struct GameScore {\\n        address playerAddress;\\n        uint256 score;\\n        uint256 timestamp;\\n        bytes32 replayHash; // Hash of replay data, can be used to verify off-chain replay data\\n    }\\n\\n    // =============== STATE VARIABLES ===============\\n    address public owner;\\n    \\n    // Mapping from player (EOA) address to Player struct\\n    mapping(address => Player) public players;\\n    \\n    // Mapping from player (EOA) address to their registered smart account address\\n    mapping(address => address) public smartAccounts;\\n    \\n    // Array of player addresses (for enumeration)\\n    address[] public playerAddresses;\\n    \\n    // Array of top scores for the leaderboard\\n    GameScore[] public topScores;\\n    \\n    // Maximum number of top scores to track (leaderboard size)\\n    uint256 public constant MAX_LEADERBOARD_SIZE = 100;\\n    \\n    // Maximum username length\\n    uint256 public constant MAX_USERNAME_LENGTH = 20;\\n    \\n    // Replay data storage (hash => exists)\\n    mapping(bytes32 => bool) public replayExists;\\n    \\n    // Mapping from player to their game history (most recent scores)\\n    mapping(address => GameScore[]) public playerScoreHistory;\\n    \\n    // Maximum number of scores to keep per player\\n    uint256 public constant MAX_PLAYER_SCORE_HISTORY = 10;\\n\\n    // =============== CONSTRUCTOR ===============\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // =============== MODIFIERS ===============\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredPlayer() {\\n        require(players[msg.sender].exists, \\\"Player not registered\\\");\\n        _;\\n    }\\n\\n    // =============== EXTERNAL FUNCTIONS ===============\\n\\n    /**\\n     * @dev Register a new player with a username.\\n     * @param username The player's username.\\n     */\\n    function registerPlayer(string memory username) external {\\n        require(!players[msg.sender].exists, \\\"Player already registered\\\");\\n        require(bytes(username).length > 0, \\\"Username cannot be empty\\\");\\n        require(bytes(username).length <= MAX_USERNAME_LENGTH, \\\"Username too long\\\");\\n\\n        players[msg.sender] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(msg.sender);\\n        emit PlayerRegistered(msg.sender, username);\\n    }\\n\\n    /**\\n     * @dev Update player's username.\\n     * @param newUsername The new username.\\n     */\\n    function updateUsername(string memory newUsername) external onlyRegisteredPlayer {\\n        require(bytes(newUsername).length > 0, \\\"Username cannot be empty\\\");\\n        require(bytes(newUsername).length <= MAX_USERNAME_LENGTH, \\\"Username too long\\\");\\n        \\n        players[msg.sender].username = newUsername;\\n        emit UsernameChanged(msg.sender, newUsername);\\n    }\\n\\n    /**\\n     * @dev Register the smart account address associated with a player's EOA.\\n     * @param smartAccount The smart account address.\\n     */\\n    function registerSmartAccount(address smartAccount) external onlyRegisteredPlayer {\\n        require(smartAccount != address(0), \\\"Invalid smart account address\\\");\\n        smartAccounts[msg.sender] = smartAccount;\\n        emit SmartAccountRegistered(msg.sender, smartAccount);\\n    }\\n\\n    /**\\n     * @dev Submit a game score.\\n     * @param score The score achieved.\\n     * @param replayHash Hash of the replay data.\\n     */\\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\\n        // Update player stats.\\n        Player storage player = players[msg.sender];\\n        player.timesPlayed++;\\n        player.lastPlayed = block.timestamp;\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        // Create game score entry.\\n        GameScore memory newScore = GameScore({\\n            playerAddress: msg.sender,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        // Mark replay hash as used.\\n        replayExists[replayHash] = true;\\n        \\n        // Add to player's score history.\\n        addToPlayerScoreHistory(msg.sender, newScore);\\n        \\n        // Update leaderboard.\\n        updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    /**\\n     * @dev Store replay data hash - allows verification of off-chain replay data.\\n     * @param replayHash Hash of the replay data.\\n     */\\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\\n        require(!replayExists[replayHash], \\\"Replay hash already exists\\\");\\n        replayExists[replayHash] = true;\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    // =============== VIEW FUNCTIONS ===============\\n\\n    /**\\n     * @dev Get player information.\\n     * @param playerAddress The address of the player.\\n     * @return Player data struct.\\n     */\\n    function getPlayer(address playerAddress) external view returns (Player memory) {\\n        require(players[playerAddress].exists, \\\"Player does not exist\\\");\\n        return players[playerAddress];\\n    }\\n\\n    /**\\n     * @dev Get the top scores (leaderboard).\\n     * @param count Number of top scores to retrieve.\\n     * @return Array of GameScore structs.\\n     */\\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\\n        uint256 actualCount = topScores.length;\\n        if (count > actualCount) {\\n            count = actualCount;\\n        }\\n        \\n        GameScore[] memory results = new GameScore[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            results[i] = topScores[i];\\n        }\\n        \\n        return results;\\n    }\\n\\n    /**\\n     * @dev Get a player's score history.\\n     * @param playerAddress The address of the player.\\n     * @return Array of GameScore structs.\\n     */\\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\\n        require(players[playerAddress].exists, \\\"Player does not exist\\\");\\n        return playerScoreHistory[playerAddress];\\n    }\\n\\n    /**\\n     * @dev Get a player's rank on the leaderboard.\\n     * @param playerAddress The address of the player.\\n     * @return Player rank (1-based) or 0 if not on leaderboard.\\n     */\\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\\n        require(players[playerAddress].exists, \\\"Player does not exist\\\");\\n        for (uint256 i = 0; i < topScores.length; i++) {\\n            if (topScores[i].playerAddress == playerAddress) {\\n                return i + 1;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Get total number of registered players.\\n     * @return Number of players.\\n     */\\n    function getPlayerCount() external view returns (uint256) {\\n        return playerAddresses.length;\\n    }\\n\\n    // =============== INTERNAL FUNCTIONS ===============\\n\\n    /**\\n     * @dev Add a score to the player's score history, keeping only recent ones.\\n     * @param playerAddress The player's address.\\n     * @param score The game score to add.\\n     */\\n    function addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\\n        GameScore[] storage history = playerScoreHistory[playerAddress];\\n        if (history.length >= MAX_PLAYER_SCORE_HISTORY) {\\n            for (uint256 i = 0; i < history.length - 1; i++) {\\n                history[i] = history[i + 1];\\n            }\\n            history.pop();\\n        }\\n        history.push(score);\\n    }\\n\\n    /**\\n     * @dev Update the leaderboard with a new score if it qualifies.\\n     * @param newScore The new score to potentially add.\\n     */\\n    function updateLeaderboard(GameScore memory newScore) internal {\\n        if (topScores.length < MAX_LEADERBOARD_SIZE) {\\n            uint256 pos = findInsertionPosition(newScore.score);\\n            topScores.push(GameScore({\\n                playerAddress: address(0),\\n                score: 0,\\n                timestamp: 0,\\n                replayHash: bytes32(0)\\n            }));\\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\\n                topScores[i] = topScores[i - 1];\\n            }\\n            topScores[pos] = newScore;\\n        } else if (newScore.score > topScores[topScores.length - 1].score) {\\n            uint256 pos = findInsertionPosition(newScore.score);\\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\\n                topScores[i] = topScores[i - 1];\\n            }\\n            topScores[pos] = newScore;\\n        }\\n    }\\n\\n    /**\\n     * @dev Find the position to insert a new score in the leaderboard using binary search.\\n     * @param score The score to insert.\\n     * @return The index where the score should be inserted.\\n     */\\n    function findInsertionPosition(uint256 score) internal view returns (uint256) {\\n        uint256 left = 0;\\n        uint256 right = topScores.length;\\n        while (left < right) {\\n            uint256 mid = left + (right - left) / 2;\\n            if (topScores[mid].score > score) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        return left;\\n    }\\n}\\n\",\"keccak256\":\"0xb7faa2e1bb55de7f13c07e7d155b3bba7d661e889c8ae8c4cf7532f32a476371\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561193d806100326000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063968ffe34116100ad578063db87714211610071578063db877142146102df578063def8315a146102e7578063e2eb41ff146102fa578063e393c51e1461031e578063e3c1955e1461033157600080fd5b8063968ffe341461028b578063a697cb0e1461029e578063b3446f85146102b1578063c2e52206146102c4578063c96cea70146102cc57600080fd5b8063749a989b116100f4578063749a989b146101e9578063873698051461021c5780638da5cb5b146102455780638dd7619414610258578063907bcac41461026b57600080fd5b806315c6aee2146101315780631cd896c1146101615780633eec9438146101775780635112711a1461018c5780635c12cd4b146101c9575b600080fd5b61014461013f3660046113ec565b610339565b6040516001600160a01b0390911681526020015b60405180910390f35b610169601481565b604051908152602001610158565b61018a610185366004611421565b610363565b005b61019f61019a3660046113ec565b610457565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610158565b6101dc6101d7366004611421565b61049b565b6040516101589190611482565b61020c6101f73660046113ec565b60056020526000908152604090205460ff1681565b6040519015158152602001610158565b61014461022a366004611421565b6002602052600090815260409020546001600160a01b031681565b600054610144906001600160a01b031681565b61018a6102663660046113ec565b6105f2565b61027e610279366004611421565b6106c9565b60405161015891906114d4565b61027e6102993660046113ec565b6107a2565b6101696102ac366004611421565b6108c6565b61018a6102bf366004611557565b610977565b600354610169565b61018a6102da366004611557565b610b67565b610169606481565b61018a6102f5366004611608565b610c7e565b61030d610308366004611421565b610db3565b60405161015895949392919061162a565b61019f61032c366004611663565b610e6d565b610169600a81565b6003818154811061034957600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526001602052604090206004015460ff1661039e5760405162461bcd60e51b81526004016103959061168d565b60405180910390fd5b6001600160a01b0381166103f45760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420736d617274206163636f756e7420616464726573730000006044820152606401610395565b3360008181526002602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b22791015b60405180910390a250565b6004818154811061046757600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b6104cf6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526001602052604090206004015460ff1661050a5760405162461bcd60e51b8152600401610395906116bc565b6001600160a01b03821660009081526001602052604090819020815160a0810190925280548290829061053c906116eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610568906116eb565b80156105b55780601f1061058a576101008083540402835291602001916105b5565b820191906000526020600020905b81548152906001019060200180831161059857829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b3360009081526001602052604090206004015460ff166106245760405162461bcd60e51b81526004016103959061168d565b60008181526005602052604090205460ff16156106835760405162461bcd60e51b815260206004820152601a60248201527f5265706c6179206861736820616c7265616479206578697374730000000000006044820152606401610395565b600081815260056020526040808220805460ff1916600117905551829133917f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d9190a350565b6001600160a01b03811660009081526001602052604090206004015460609060ff166107075760405162461bcd60e51b8152600401610395906116bc565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083529193909284015b82821015610797576000848152602090819020604080516080810182526004860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600301546060830152908352909201910161073a565b505050509050919050565b600454606090808311156107b4578092505b60008367ffffffffffffffff8111156107cf576107cf611541565b60405190808252806020026020018201604052801561082157816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816107ed5790505b50905060005b848110156108be576004818154811061084257610842611725565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03168352600181015493830193909352600283015490820152600390910154606082015282518390839081106108a0576108a0611725565b602002602001018190525080806108b690611751565b915050610827565b509392505050565b6001600160a01b03811660009081526001602052604081206004015460ff166109015760405162461bcd60e51b8152600401610395906116bc565b60005b60045481101561096e57826001600160a01b03166004828154811061092b5761092b611725565b60009182526020909120600490910201546001600160a01b03160361095c5761095581600161176a565b9392505050565b8061096681611751565b915050610904565b50600092915050565b3360009081526001602052604090206004015460ff16156109da5760405162461bcd60e51b815260206004820152601960248201527f506c6179657220616c72656164792072656769737465726564000000000000006044820152606401610395565b6000815111610a265760405162461bcd60e51b8152602060048201526018602482015277557365726e616d652063616e6e6f7420626520656d70747960401b6044820152606401610395565b601481511115610a6c5760405162461bcd60e51b8152602060048201526011602482015270557365726e616d6520746f6f206c6f6e6760781b6044820152606401610395565b6040805160a081018252828152600060208083018290528284018290526060830182905260016080840181905233835290529190912081518190610ab090826117d2565b506020820151600182810191909155604080840151600284015560608401516003808501919091556080909401516004909301805460ff191693151593909317909255825490810183556000929092527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a9061044c908490611892565b3360009081526001602052604090206004015460ff16610b995760405162461bcd60e51b81526004016103959061168d565b6000815111610be55760405162461bcd60e51b8152602060048201526018602482015277557365726e616d652063616e6e6f7420626520656d70747960401b6044820152606401610395565b601481511115610c2b5760405162461bcd60e51b8152602060048201526011602482015270557365726e616d6520746f6f206c6f6e6760781b6044820152606401610395565b336000908152600160205260409020610c4482826117d2565b50336001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e0658260405161044c9190611892565b3360009081526001602052604090206004015460ff16610cb05760405162461bcd60e51b81526004016103959061168d565b3360009081526001602052604081206002810180549192610cd083611751565b90915550504260038201556001810154831115610cef57600181018390555b604080516080810182523380825260208083018790524283850152606083018690526000868152600590915292909220805460ff1916600117905590610d359082610ebd565b610d3e81611036565b6040805185815242602082015290810184905233907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a2604051839033907f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d90600090a350505050565b600160205260009081526040902080548190610dce906116eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa906116eb565b8015610e475780601f10610e1c57610100808354040283529160200191610e47565b820191906000526020600020905b815481529060010190602001808311610e2a57829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b60066020528160005260406000208181548110610e8957600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b6001600160a01b03821660009081526006602052604090208054600a11610fd95760005b8154610eef906001906118a5565b811015610f905781610f0282600161176a565b81548110610f1257610f12611725565b9060005260206000209060040201828281548110610f3257610f32611725565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015580610f8881611751565b915050610ee1565b5080805480610fa157610fa16118b8565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590555b8054600180820183556000928352602092839020845160049093020180546001600160a01b0319166001600160a01b0390931692909217825591830151918101919091556040820151600282015560609091015160039091015550565b6004546064111561125d5760006110508260200151611368565b6040805160808101825260008082526020820181815292820181815260608301828152600480546001808201835582865295517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91830291820180546001600160a01b0319166001600160a01b0390921691909117905595517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d860155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e909401939093559154929350909161114d91906118a5565b90505b818111156111f45760046111656001836118a5565b8154811061117557611175611725565b90600052602060002090600402016004828154811061119657611196611725565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808301549082015560028083015490820155600391820154910155806111ec816118ce565b915050611150565b50816004828154811061120957611209611725565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b03909216919091178155908201516001820155604082015160028201556060909101516003909101555050565b6004805461126d906001906118a5565b8154811061127d5761127d611725565b906000526020600020906004020160010154816020015111156113655760006112a98260200151611368565b6004549091506000906112be906001906118a5565b90505b818111156111f45760046112d66001836118a5565b815481106112e6576112e6611725565b90600052602060002090600402016004828154811061130757611307611725565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018083015490820155600280830154908201556003918201549101558061135d816118ce565b9150506112c1565b50565b60045460009081905b808210156113e5576000600261138784846118a5565b61139191906118e5565b61139b908461176a565b905084600482815481106113b1576113b1611725565b90600052602060002090600402016001015411156113db576113d481600161176a565b92506113df565b8091505b50611371565b5092915050565b6000602082840312156113fe57600080fd5b5035919050565b80356001600160a01b038116811461141c57600080fd5b919050565b60006020828403121561143357600080fd5b61095582611405565b6000815180845260005b8181101561146257602081850181015186830182015201611446565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a0602084015261149e60c084018261143c565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b602080825282518282018190526000919060409081850190868401855b8281101561153457815180516001600160a01b031685528681015187860152858101518686015260609081015190850152608090930192908501906001016114f1565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561156957600080fd5b813567ffffffffffffffff8082111561158157600080fd5b818401915084601f83011261159557600080fd5b8135818111156115a7576115a7611541565b604051601f8201601f19908116603f011681019083821181831017156115cf576115cf611541565b816040528281528760208487010111156115e857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806040838503121561161b57600080fd5b50508035926020909101359150565b60a08152600061163d60a083018861143c565b905085602083015284604083015283606083015282151560808301529695505050505050565b6000806040838503121561167657600080fd5b61167f83611405565b946020939093013593505050565b602080825260159082015274141b185e595c881b9bdd081c9959da5cdd195c9959605a1b604082015260600190565b602080825260159082015274141b185e595c88191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b600181811c908216806116ff57607f821691505b60208210810361171f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016117635761176361173b565b5060010190565b8082018082111561177d5761177d61173b565b92915050565b601f8211156117cd57600081815260208120601f850160051c810160208610156117aa5750805b601f850160051c820191505b818110156117c9578281556001016117b6565b5050505b505050565b815167ffffffffffffffff8111156117ec576117ec611541565b611800816117fa84546116eb565b84611783565b602080601f831160018114611835576000841561181d5750858301515b600019600386901b1c1916600185901b1785556117c9565b600085815260208120601f198616915b8281101561186457888601518255948401946001909101908401611845565b50858210156118825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602081526000610955602083018461143c565b8181038181111561177d5761177d61173b565b634e487b7160e01b600052603160045260246000fd5b6000816118dd576118dd61173b565b506000190190565b60008261190257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220efd418ff70bc1c4e41704dcbdbdfa21229ece16ec453e78ba7331c661cb9eac264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.",
    "kind": "dev",
    "methods": {
      "getPlayer(address)": {
        "details": "Get player information.",
        "params": {
          "playerAddress": "The address of the player."
        },
        "returns": {
          "_0": "Player data struct."
        }
      },
      "getPlayerCount()": {
        "details": "Get total number of registered players.",
        "returns": {
          "_0": "Number of players."
        }
      },
      "getPlayerRank(address)": {
        "details": "Get a player's rank on the leaderboard.",
        "params": {
          "playerAddress": "The address of the player."
        },
        "returns": {
          "_0": "Player rank (1-based) or 0 if not on leaderboard."
        }
      },
      "getPlayerScoreHistory(address)": {
        "details": "Get a player's score history.",
        "params": {
          "playerAddress": "The address of the player."
        },
        "returns": {
          "_0": "Array of GameScore structs."
        }
      },
      "getTopScores(uint256)": {
        "details": "Get the top scores (leaderboard).",
        "params": {
          "count": "Number of top scores to retrieve."
        },
        "returns": {
          "_0": "Array of GameScore structs."
        }
      },
      "registerPlayer(string)": {
        "details": "Register a new player with a username.",
        "params": {
          "username": "The player's username."
        }
      },
      "registerSmartAccount(address)": {
        "details": "Register the smart account address associated with a player's EOA.",
        "params": {
          "smartAccount": "The smart account address."
        }
      },
      "storeReplayDataHash(bytes32)": {
        "details": "Store replay data hash - allows verification of off-chain replay data.",
        "params": {
          "replayHash": "Hash of the replay data."
        }
      },
      "submitScore(uint256,bytes32)": {
        "details": "Submit a game score.",
        "params": {
          "replayHash": "Hash of the replay data.",
          "score": "The score achieved."
        }
      },
      "updateUsername(string)": {
        "details": "Update player's username.",
        "params": {
          "newUsername": "The new username."
        }
      }
    },
    "title": "MonadRunnerGame",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 63,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Player)47_storage)"
      },
      {
        "astId": 67,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "smartAccounts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 70,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "topScores",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(GameScore)56_storage)dyn_storage"
      },
      {
        "astId": 84,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "replayExists",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 90,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerScoreHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(GameScore)56_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GameScore)56_storage)dyn_storage": {
        "base": "t_struct(GameScore)56_storage",
        "encoding": "dynamic_array",
        "label": "struct MonadRunnerGame.GameScore[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(GameScore)56_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.GameScore[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(GameScore)56_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Player)47_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)47_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameScore)56_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.GameScore",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "score",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 53,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 55,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "replayHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)47_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.Player",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "highScore",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 42,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timesPlayed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "lastPlayed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}