{
  "address": "0x3C3372f01bBfEcE65be20e9ceA439b6eFb1dE8e6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidRelayerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSmartAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegisteredPlayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReplayAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "PlayerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ReplayDataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ScoreSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "SmartAccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "UsernameChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "addRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "highScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timesPlayed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPlayed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MonadRunnerGame.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerScoreHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopScores",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "isAuthorizedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "highScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timesPlayed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPlayed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccountFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "removeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "replayExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "smartAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "storeReplayDataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "topScores",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51a2a4d5e7a6cb0bdf6bc1ae99df4277a9d98b2f2996c3ba2e6d419f3580ca7e",
  "receipt": {
    "to": null,
    "from": "0xe4bD25643625048D2F8657c0dA06EaD4757657B8",
    "contractAddress": "0x3C3372f01bBfEcE65be20e9ceA439b6eFb1dE8e6",
    "transactionIndex": 19,
    "gasUsed": "1750279",
    "logsBloom": "0x
    "blockHash": "0xd2cde540e7d4105a475b659a4e6b0cd114896e6451202d997ae67d18ccc29480",
    "transactionHash": "0x51a2a4d5e7a6cb0bdf6bc1ae99df4277a9d98b2f2996c3ba2e6d419f3580ca7e",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 7624805,
        "transactionHash": "0x51a2a4d5e7a6cb0bdf6bc1ae99df4277a9d98b2f2996c3ba2e6d419f3580ca7e",
        "address": "0x3C3372f01bBfEcE65be20e9ceA439b6eFb1dE8e6",
        "topics": [
          "0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5",
          "0x000000000000000000000000e4bd25643625048d2f8657c0da06ead4757657b8"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xd2cde540e7d4105a475b659a4e6b0cd114896e6451202d997ae67d18ccc29480"
      }
    ],
    "blockNumber": 7624805,
    "cumulativeGasUsed": "3765172",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9824b2d2673cb40064e1cf427e66a951",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRelayerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSmartAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegisteredPlayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReplayAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ReplayDataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"SmartAccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"UsernameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MonadRunnerGame.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerScoreHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopScores\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isAuthorizedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccountFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"replayExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"smartAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"storeReplayDataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topScores\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"MonadRunnerGame\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MonadRunnerGame.sol\":\"MonadRunnerGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MonadRunnerGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MonadRunnerGame\\n * @dev Smart contract for storing Monad Runner game data on-chain,\\n *      including registration of a smart account for account abstraction.\\n *      Optimized for minimal gas usage.\\n */\\ncontract MonadRunnerGame {\\n    // =============== EVENTS ===============\\n    event PlayerRegistered(address indexed playerAddress, string username);\\n    event UsernameChanged(address indexed playerAddress, string newUsername);\\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\\n    event SmartAccountRegistered(address indexed eoa, address smartAccount);\\n    event RelayerAdded(address indexed relayer);\\n    event RelayerRemoved(address indexed relayer);\\n\\n    // =============== STRUCTS ===============\\n    struct Player {\\n        string username;\\n        uint256 highScore;\\n        uint256 timesPlayed;\\n        uint256 lastPlayed;\\n        bool exists;\\n    }\\n\\n    struct GameScore {\\n        address playerAddress;\\n        uint256 score;\\n        uint256 timestamp;\\n        bytes32 replayHash;\\n    }\\n\\n    // =============== CONSTANTS ===============\\n    // Using constant for fixed values saves gas\\n    uint256 private constant MAX_LEADERBOARD_SIZE = 100;\\n    uint256 private constant MAX_USERNAME_LENGTH = 20;\\n    uint256 private constant MAX_PLAYER_SCORE_HISTORY = 10;\\n    \\n    // Cheaper to use uint8 for small numbers (uses less storage)\\n    uint8 private constant USERNAME_PREFIX_LENGTH = 7; // \\\"Player_\\\"\\n\\n    // =============== STATE VARIABLES ===============\\n    // Immutable variables cost less gas than regular state variables\\n    address public immutable owner;\\n    \\n    // Pack related data together when possible\\n    mapping(address => Player) public players;\\n    mapping(address => address) public smartAccounts;\\n    mapping(bytes32 => bool) public replayExists;\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    // Separate mappings for arrays to avoid storage bloat\\n    mapping(address => GameScore[]) private playerScoreHistory;\\n    address[] public playerAddresses;\\n    GameScore[] public topScores;\\n\\n    // =============== CONSTRUCTOR ===============\\n    constructor() {\\n        owner = msg.sender;\\n        // Add the deployer as the first authorized relayer\\n        authorizedRelayers[msg.sender] = true;\\n        emit RelayerAdded(msg.sender);\\n    }\\n\\n    // =============== MODIFIERS ===============\\n    // Use custom errors instead of revert strings to save gas\\n    error OnlyOwner();\\n    error OnlyRegisteredPlayer();\\n    error OnlyAuthorizedRelayer();\\n    error PlayerAlreadyRegistered();\\n    error PlayerDoesNotExist();\\n    error InvalidSmartAccount();\\n    error UsernameTooLong();\\n    error UsernameEmpty();\\n    error ReplayAlreadyExists();\\n    error InvalidRelayerAddress();\\n    error NotAnAuthorizedRelayer();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyRegisteredPlayer() {\\n        if (!players[msg.sender].exists) revert OnlyRegisteredPlayer();\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedRelayer() {\\n        if (!authorizedRelayers[msg.sender]) revert OnlyAuthorizedRelayer();\\n        _;\\n    }\\n\\n    // =============== ADMIN FUNCTIONS ===============\\n    function addRelayer(address relayer) external onlyOwner {\\n        if (relayer == address(0)) revert InvalidRelayerAddress();\\n        authorizedRelayers[relayer] = true;\\n        emit RelayerAdded(relayer);\\n    }\\n\\n    function removeRelayer(address relayer) external onlyOwner {\\n        if (!authorizedRelayers[relayer]) revert NotAnAuthorizedRelayer();\\n        authorizedRelayers[relayer] = false;\\n        emit RelayerRemoved(relayer);\\n    }\\n\\n    // =============== EXTERNAL FUNCTIONS ===============\\n    function registerPlayer(string calldata username) external {\\n        // Using calldata for string parameters saves gas when the function doesn't modify the string\\n        if (players[msg.sender].exists) revert PlayerAlreadyRegistered();\\n        \\n        uint256 len = bytes(username).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n\\n        // Initialize all fields directly to save gas\\n        players[msg.sender] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(msg.sender);\\n        emit PlayerRegistered(msg.sender, username);\\n    }\\n\\n    function updateUsername(string calldata newUsername) external onlyRegisteredPlayer {\\n        uint256 len = bytes(newUsername).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n        \\n        players[msg.sender].username = newUsername;\\n        emit UsernameChanged(msg.sender, newUsername);\\n    }\\n\\n    function registerSmartAccount(address smartAccount) external onlyRegisteredPlayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        smartAccounts[msg.sender] = smartAccount;\\n        emit SmartAccountRegistered(msg.sender, smartAccount);\\n    }\\n\\n    function registerSmartAccountFor(address playerAddress, address smartAccount) external onlyAuthorizedRelayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        \\n        // Gas optimization: Store the existence check result\\n        bool playerExists = players[playerAddress].exists;\\n        \\n        // For EIP-7702, if the player doesn't exist yet but the smart account\\n        // is the same as the player address, register the player automatically\\n        if (!playerExists && playerAddress == smartAccount) {\\n            // Generate username only when needed (gas optimization)\\n            string memory username = _generateDefaultUsername(playerAddress);\\n            \\n            players[playerAddress] = Player({\\n                username: username,\\n                highScore: 0,\\n                timesPlayed: 0,\\n                lastPlayed: 0,\\n                exists: true\\n            });\\n            \\n            playerAddresses.push(playerAddress);\\n            emit PlayerRegistered(playerAddress, username);\\n        } else {\\n            // Otherwise, require that the player already exists\\n            if (!playerExists) revert PlayerDoesNotExist();\\n        }\\n        \\n        smartAccounts[playerAddress] = smartAccount;\\n        emit SmartAccountRegistered(playerAddress, smartAccount);\\n    }\\n\\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\\n        // Gas optimization: Use storage pointer\\n        Player storage player = players[msg.sender];\\n        \\n        // Unchecked math for gas optimization when overflow is impossible\\n        unchecked {\\n            player.timesPlayed++;\\n        }\\n        \\n        player.lastPlayed = block.timestamp;\\n        \\n        // Only update highScore if needed\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        GameScore memory newScore = GameScore({\\n            playerAddress: msg.sender,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        replayExists[replayHash] = true;\\n        _addToPlayerScoreHistory(msg.sender, newScore);\\n        _updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\\n        if (replayExists[replayHash]) revert ReplayAlreadyExists();\\n        replayExists[replayHash] = true;\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    // =============== VIEW FUNCTIONS ===============\\n    function getPlayer(address playerAddress) external view returns (Player memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return players[playerAddress];\\n    }\\n\\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\\n        // Gas optimization: Avoid unnecessary copies\\n        uint256 actualCount = topScores.length;\\n        if (count > actualCount) {\\n            count = actualCount;\\n        }\\n        \\n        GameScore[] memory results = new GameScore[](count);\\n        \\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < count; i++) {\\n                results[i] = topScores[i];\\n            }\\n        }\\n        \\n        return results;\\n    }\\n\\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return playerScoreHistory[playerAddress];\\n    }\\n\\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        uint256 length = topScores.length;\\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (topScores[i].playerAddress == playerAddress) {\\n                    return i + 1;\\n                }\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n\\n    function getPlayerCount() external view returns (uint256) {\\n        return playerAddresses.length;\\n    }\\n\\n    function isAuthorizedRelayer(address relayer) external view returns (bool) {\\n        return authorizedRelayers[relayer];\\n    }\\n\\n    // =============== INTERNAL FUNCTIONS ===============\\n    function _addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\\n        GameScore[] storage history = playerScoreHistory[playerAddress];\\n        uint256 length = history.length;\\n        \\n        if (length >= MAX_PLAYER_SCORE_HISTORY) {\\n            // Shift items to make room (gas optimization using unchecked)\\n            unchecked {\\n                for (uint256 i = 0; i < length - 1; i++) {\\n                    history[i] = history[i + 1];\\n                }\\n            }\\n            history.pop();\\n        }\\n        \\n        history.push(score);\\n    }\\n\\n    function _updateLeaderboard(GameScore memory newScore) internal {\\n        uint256 length = topScores.length;\\n        \\n        if (length < MAX_LEADERBOARD_SIZE) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            topScores.push(GameScore({\\n                playerAddress: address(0),\\n                score: 0,\\n                timestamp: 0,\\n                replayHash: bytes32(0)\\n            }));\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        } else if (newScore.score > topScores[length - 1].score) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length - 1; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        }\\n    }\\n\\n    function _findInsertionPosition(uint256 score) internal view returns (uint256) {\\n        uint256 left = 0;\\n        uint256 right = topScores.length;\\n        \\n        while (left < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (topScores[mid].score > score) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        \\n        return left;\\n    }\\n\\n    // Optimized username generation for lower gas\\n    function _generateDefaultUsername(address playerAddress) internal pure returns (string memory) {\\n        // Fixed prefix \\\"Player_\\\" + last 8 hex chars of address\\n        bytes memory result = new bytes(15); // 7 for \\\"Player_\\\" + 8 for hex\\n        \\n        // Copy \\\"Player_\\\" prefix\\n        result[0] = \\\"P\\\";\\n        result[1] = \\\"l\\\";\\n        result[2] = \\\"a\\\";\\n        result[3] = \\\"y\\\";\\n        result[4] = \\\"e\\\";\\n        result[5] = \\\"r\\\";\\n        result[6] = \\\"_\\\";\\n        \\n        // Extract last 4 bytes of address (8 hex chars)\\n        bytes20 addrBytes = bytes20(playerAddress);\\n        \\n        // Optimize for gas by using bitwise operations and direct assignment\\n        unchecked {\\n            for (uint256 i = 0; i < 4; i++) {\\n                uint8 b = uint8(addrBytes[16 + i]); // last 4 bytes\\n                result[7 + i*2] = _getHexChar(b >> 4); // high nibble\\n                result[8 + i*2] = _getHexChar(b & 0x0f); // low nibble\\n            }\\n        }\\n        \\n        return string(result);\\n    }\\n    \\n    // Gas-optimized hex conversion\\n    function _getHexChar(uint8 value) internal pure returns (bytes1) {\\n        // Using inline assembly for the most gas-efficient conversion\\n        bytes1 c;\\n        assembly {\\n            // Add '0' (48) for 0-9, or 'a'-10 (97-10=87) for a-f\\n            c := add(add(value, mul(lt(value, 10), 48)), mul(iszero(lt(value, 10)), 87))\\n        }\\n        return c;\\n    }\\n}\",\"keccak256\":\"0xaa3ae4f54fa286b52da503f1beaf8c18bf35375947505c9ad47bb0835bb56a87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50336080819052600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a2608051611e0161007f60003960008181610288015281816106420152610f010152611e016000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638dd76194116100b8578063c2e522061161007c578063c2e5220614610324578063c96cea701461032c578063dd39f00d1461033f578063def8315a14610352578063e0f324d914610365578063e2eb41ff1461039157600080fd5b80638dd76194146102aa578063907bcac4146102bd578063968ffe34146102dd578063a697cb0e146102f0578063b3446f851461031157600080fd5b806360f0a5ac116100ff57806360f0a5ac14610211578063647b3cc014610224578063749a989b14610237578063873698051461025a5780638da5cb5b1461028357600080fd5b806315c6aee21461013c57806329e295c51461016c5780633eec94381461019f5780635112711a146101b45780635c12cd4b146101f1575b600080fd5b61014f61014a3660046118a6565b6103b5565b6040516001600160a01b0390911681526020015b60405180910390f35b61018f61017a3660046118db565b60036020526000908152604090205460ff1681565b6040519015158152602001610163565b6101b26101ad3660046118db565b6103df565b005b6101c76101c23660046118a6565b61049b565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610163565b6102046101ff3660046118db565b6104df565b6040516101639190611943565b6101b261021f3660046118db565b610637565b6101b2610232366004611995565b610702565b61018f6102453660046118a6565b60026020526000908152604090205460ff1681565b61014f6102683660046118db565b6001602052600090815260409020546001600160a01b031681565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6101b26102b83660046118a6565b610945565b6102d06102cb3660046118db565b6109ee565b60405161016391906119c8565b6102d06102eb3660046118a6565b610ac8565b6103036102fe3660046118db565b610be1565b604051908152602001610163565b6101b261031f366004611a35565b610c83565b600554610303565b6101b261033a366004611a35565b610e28565b6101b261034d3660046118db565b610ef6565b6101b2610360366004611aa7565b610fb2565b61018f6103733660046118db565b6001600160a01b031660009081526003602052604090205460ff1690565b6103a461039f3660046118db565b6110de565b604051610163959493929190611ac9565b600581815481106103c557600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526020819052604090206004015460ff1661041257604051637b0e56d560e11b815260040160405180910390fd5b6001600160a01b03811661043957604051636afdfe6f60e01b815260040160405180910390fd5b3360008181526001602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a250565b600681815481106104ab57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b6105136040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526020819052604090206004015460ff1661054f57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090819020815160a0810190925280548290829061058190611b02565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad90611b02565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461068057604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff166106b95760405163283d0c1360e11b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19169055517f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b9190a250565b3360009081526003602052604090205460ff166107325760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03811661075957604051636afdfe6f60e01b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090206004015460ff16801580156107975750816001600160a01b0316836001600160a01b0316145b156108be5760006107a784611198565b6040805160a0810182528281526000602080830182905282840182905260608301829052600160808401526001600160a01b0389168252819052919091208151929350909181906107f89082611ba1565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03871690811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906108b0908490611c61565b60405180910390a2506108dc565b806108dc57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0383811660008181526001602090815260409182902080546001600160a01b0319169487169485179055905192835290917fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b22791015b60405180910390a2505050565b3360009081526020819052604090206004015460ff1661097857604051637b0e56d560e11b815260040160405180910390fd5b60008181526002602052604090205460ff16156109a85760405163f54cdc8760e01b815260040160405180910390fd5b600081815260026020526040808220805460ff1916600117905551829133917f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d9190a350565b6001600160a01b03811660009081526020819052604090206004015460609060ff16610a2d57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015610abd576000848152602090819020604080516080810182526004860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003015460608301529083529092019101610a60565b505050509050919050565b60065460609080831115610ada578092505b60008367ffffffffffffffff811115610af557610af5611b3c565b604051908082528060200260200182016040528015610b4757816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610b135790505b50905060005b84811015610bd95760068181548110610b6857610b68611c74565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260039091015460608201528251839083908110610bc657610bc6611c74565b6020908102919091010152600101610b4d565b509392505050565b6001600160a01b03811660009081526020819052604081206004015460ff16610c1d57604051632e4bf5e760e21b815260040160405180910390fd5b60065460005b81811015610c7957836001600160a01b031660068281548110610c4857610c48611c74565b60009182526020909120600490910201546001600160a01b031603610c71576001019392505050565b600101610c23565b5060009392505050565b3360009081526020819052604090206004015460ff1615610cb75760405163ab5ac72b60e01b815260040160405180910390fd5b806000819003610cda57604051630b68b9bb60e11b815260040160405180910390fd5b6014811115610cfc57604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830182905260408084018390526060840183905260016080909401939093523382528190522081518190610d769082611ba1565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906109389086908690611c8a565b3360009081526020819052604090206004015460ff16610e5b57604051637b0e56d560e11b815260040160405180910390fd5b806000819003610e7e57604051630b68b9bb60e11b815260040160405180910390fd5b6014811115610ea057604051637dcc042f60e11b815260040160405180910390fd5b336000908152602081905260409020610eba838583611cb9565b50336001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e0658484604051610938929190611c8a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f3f57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b038116610f665760405163fe16c3c560e01b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a250565b3360009081526020819052604090206004015460ff16610fe557604051637b0e56d560e11b815260040160405180910390fd5b336000908152602081905260409020600281018054600190810190915542600383015581015483111561101a57600181018390555b604080516080810182523380825260208083018790524283850152606083018690526000868152600290915292909220805460ff191660011790559061106090826113da565b6110698161153d565b6040805185815242602082015290810184905233907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a2604051839033907f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d90600090a350505050565b6000602081905290815260409020805481906110f990611b02565b80601f016020809104026020016040519081016040528092919081815260200182805461112590611b02565b80156111725780601f1061114757610100808354040283529160200191611172565b820191906000526020600020905b81548152906001019060200180831161115557829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b60408051600f80825281830190925260609160009190602082018180368337019050509050600560fc1b816000815181106111d5576111d5611c74565b60200101906001600160f81b031916908160001a905350601b60fa1b8160018151811061120457611204611c74565b60200101906001600160f81b031916908160001a905350606160f81b8160028151811061123357611233611c74565b60200101906001600160f81b031916908160001a905350607960f81b8160038151811061126257611262611c74565b60200101906001600160f81b031916908160001a905350606560f81b8160048151811061129157611291611c74565b60200101906001600160f81b031916908160001a905350603960f91b816005815181106112c0576112c0611c74565b60200101906001600160f81b031916908160001a905350605f60f81b816006815181106112ef576112ef611c74565b60200101906001600160f81b031916908160001a905350606083901b60005b60048110156113d157600082826010016014811061132e5761132e611c74565b1a905061134e600482901c6030600a821090810290910190156057020190565b84836002026007018151811061136657611366611c74565b60200101906001600160f81b031916908160001a90535061139981600f166030600a821090810290910190156057020190565b8483600202600801815181106113b1576113b1611c74565b60200101906001600160f81b031916908160001a9053505060010161130e565b50909392505050565b6001600160a01b03821660009081526004602052604090208054600a81106114df5760005b600182038110156114965782816001018154811061141f5761141f611c74565b906000526020600020906004020183828154811061143f5761143f611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018083015481830155600280840154908301556003928301549290910191909155016113ff565b50818054806114a7576114a7611d7a565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590555b508054600180820183556000928352602092839020845160049093020180546001600160a01b0319166001600160a01b0390931692909217825591830151918101919091556040820151600282015560609091015160039091015550565b6006546064811015611743576000611558836020015161182c565b604080516080810182526000808252602082018181529282018181526060830182815260068054600181018255935292517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490930292830180546001600160a01b0319166001600160a01b0390921691909117905592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42909101559050815b818111156116d9576006600182038154811061166357611663611c74565b90600052602060002090600402016006828154811061168457611684611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611645565b5082600682815481106116ee576116ee611c74565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600182015560408201516002820155606090910151600390910155505050565b6006611750600183611da6565b8154811061176057611760611c74565b9060005260206000209060040201600101548260200151111561182857600061178c836020015161182c565b905060001982015b818111156116d957600660018203815481106117b2576117b2611c74565b9060005260206000209060040201600682815481106117d3576117d3611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611794565b5050565b60065460009081905b8082101561189f576000600261184b8385611dbf565b6118559190611dd2565b9050846006828154811061186b5761186b611c74565b90600052602060002090600402016001015411156118955761188e816001611dbf565b9250611899565b8091505b50611835565b5092915050565b6000602082840312156118b857600080fd5b5035919050565b80356001600160a01b03811681146118d657600080fd5b919050565b6000602082840312156118ed57600080fd5b6118f6826118bf565b9392505050565b6000815180845260005b8181101561192357602081850181015186830182015201611907565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a0602084015261195f60c08401826118fd565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b600080604083850312156119a857600080fd5b6119b1836118bf565b91506119bf602084016118bf565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611a2857815180516001600160a01b031685528681015187860152858101518686015260609081015190850152608090930192908501906001016119e5565b5091979650505050505050565b60008060208385031215611a4857600080fd5b823567ffffffffffffffff80821115611a6057600080fd5b818501915085601f830112611a7457600080fd5b813581811115611a8357600080fd5b866020828501011115611a9557600080fd5b60209290920196919550909350505050565b60008060408385031215611aba57600080fd5b50508035926020909101359150565b60a081526000611adc60a08301886118fd565b905085602083015284604083015283606083015282151560808301529695505050505050565b600181811c90821680611b1657607f821691505b602082108103611b3657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115611b9c57600081815260208120601f850160051c81016020861015611b795750805b601f850160051c820191505b81811015611b9857828155600101611b85565b5050505b505050565b815167ffffffffffffffff811115611bbb57611bbb611b3c565b611bcf81611bc98454611b02565b84611b52565b602080601f831160018114611c045760008415611bec5750858301515b600019600386901b1c1916600185901b178555611b98565b600085815260208120601f198616915b82811015611c3357888601518255948401946001909101908401611c14565b5085821015611c515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006118f660208301846118fd565b634e487b7160e01b600052603260045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b67ffffffffffffffff831115611cd157611cd1611b3c565b611ce583611cdf8354611b02565b83611b52565b6000601f841160018114611d195760008515611d015750838201355b600019600387901b1c1916600186901b178355611d73565b600083815260209020601f19861690835b82811015611d4a5786850135825560209485019460019092019101611d2a565b5086821015611d675760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611db957611db9611d90565b92915050565b80820180821115611db957611db9611d90565b600082611def57634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638dd76194116100b8578063c2e522061161007c578063c2e5220614610324578063c96cea701461032c578063dd39f00d1461033f578063def8315a14610352578063e0f324d914610365578063e2eb41ff1461039157600080fd5b80638dd76194146102aa578063907bcac4146102bd578063968ffe34146102dd578063a697cb0e146102f0578063b3446f851461031157600080fd5b806360f0a5ac116100ff57806360f0a5ac14610211578063647b3cc014610224578063749a989b14610237578063873698051461025a5780638da5cb5b1461028357600080fd5b806315c6aee21461013c57806329e295c51461016c5780633eec94381461019f5780635112711a146101b45780635c12cd4b146101f1575b600080fd5b61014f61014a3660046118a6565b6103b5565b6040516001600160a01b0390911681526020015b60405180910390f35b61018f61017a3660046118db565b60036020526000908152604090205460ff1681565b6040519015158152602001610163565b6101b26101ad3660046118db565b6103df565b005b6101c76101c23660046118a6565b61049b565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610163565b6102046101ff3660046118db565b6104df565b6040516101639190611943565b6101b261021f3660046118db565b610637565b6101b2610232366004611995565b610702565b61018f6102453660046118a6565b60026020526000908152604090205460ff1681565b61014f6102683660046118db565b6001602052600090815260409020546001600160a01b031681565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6101b26102b83660046118a6565b610945565b6102d06102cb3660046118db565b6109ee565b60405161016391906119c8565b6102d06102eb3660046118a6565b610ac8565b6103036102fe3660046118db565b610be1565b604051908152602001610163565b6101b261031f366004611a35565b610c83565b600554610303565b6101b261033a366004611a35565b610e28565b6101b261034d3660046118db565b610ef6565b6101b2610360366004611aa7565b610fb2565b61018f6103733660046118db565b6001600160a01b031660009081526003602052604090205460ff1690565b6103a461039f3660046118db565b6110de565b604051610163959493929190611ac9565b600581815481106103c557600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526020819052604090206004015460ff1661041257604051637b0e56d560e11b815260040160405180910390fd5b6001600160a01b03811661043957604051636afdfe6f60e01b815260040160405180910390fd5b3360008181526001602090815260409182902080546001600160a01b0319166001600160a01b03861690811790915591519182527fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b227910160405180910390a250565b600681815481106104ab57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b6105136040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526020819052604090206004015460ff1661054f57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090819020815160a0810190925280548290829061058190611b02565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad90611b02565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461068057604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff166106b95760405163283d0c1360e11b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19169055517f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b9190a250565b3360009081526003602052604090205460ff166107325760405163051deb6960e31b815260040160405180910390fd5b6001600160a01b03811661075957604051636afdfe6f60e01b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090206004015460ff16801580156107975750816001600160a01b0316836001600160a01b0316145b156108be5760006107a784611198565b6040805160a0810182528281526000602080830182905282840182905260608301829052600160808401526001600160a01b0389168252819052919091208151929350909181906107f89082611ba1565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03871690811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906108b0908490611c61565b60405180910390a2506108dc565b806108dc57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b0383811660008181526001602090815260409182902080546001600160a01b0319169487169485179055905192835290917fb8c36117828c82e9f174f1be4fcc6fdcf92fb930ab0f1f0984d5ce3552b0b22791015b60405180910390a2505050565b3360009081526020819052604090206004015460ff1661097857604051637b0e56d560e11b815260040160405180910390fd5b60008181526002602052604090205460ff16156109a85760405163f54cdc8760e01b815260040160405180910390fd5b600081815260026020526040808220805460ff1916600117905551829133917f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d9190a350565b6001600160a01b03811660009081526020819052604090206004015460609060ff16610a2d57604051632e4bf5e760e21b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015610abd576000848152602090819020604080516080810182526004860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003015460608301529083529092019101610a60565b505050509050919050565b60065460609080831115610ada578092505b60008367ffffffffffffffff811115610af557610af5611b3c565b604051908082528060200260200182016040528015610b4757816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610b135790505b50905060005b84811015610bd95760068181548110610b6857610b68611c74565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260039091015460608201528251839083908110610bc657610bc6611c74565b6020908102919091010152600101610b4d565b509392505050565b6001600160a01b03811660009081526020819052604081206004015460ff16610c1d57604051632e4bf5e760e21b815260040160405180910390fd5b60065460005b81811015610c7957836001600160a01b031660068281548110610c4857610c48611c74565b60009182526020909120600490910201546001600160a01b031603610c71576001019392505050565b600101610c23565b5060009392505050565b3360009081526020819052604090206004015460ff1615610cb75760405163ab5ac72b60e01b815260040160405180910390fd5b806000819003610cda57604051630b68b9bb60e11b815260040160405180910390fd5b6014811115610cfc57604051637dcc042f60e11b815260040160405180910390fd5b6040518060a0016040528084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830182905260408084018390526060840183905260016080909401939093523382528190522081518190610d769082611ba1565b5060208201516001828101919091556040808401516002840155606084015160038401556080909301516004909201805460ff1916921515929092179091556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906109389086908690611c8a565b3360009081526020819052604090206004015460ff16610e5b57604051637b0e56d560e11b815260040160405180910390fd5b806000819003610e7e57604051630b68b9bb60e11b815260040160405180910390fd5b6014811115610ea057604051637dcc042f60e11b815260040160405180910390fd5b336000908152602081905260409020610eba838583611cb9565b50336001600160a01b03167f52da81525a30dd3d35a802705ef9adc922d33de50a5b8efc24b69e440451e0658484604051610938929190611c8a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f3f57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b038116610f665760405163fe16c3c560e01b815260040160405180910390fd5b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c59190a250565b3360009081526020819052604090206004015460ff16610fe557604051637b0e56d560e11b815260040160405180910390fd5b336000908152602081905260409020600281018054600190810190915542600383015581015483111561101a57600181018390555b604080516080810182523380825260208083018790524283850152606083018690526000868152600290915292909220805460ff191660011790559061106090826113da565b6110698161153d565b6040805185815242602082015290810184905233907f11774431b482d8b33ae4c1173cffa3967485c8c00a1a423a1ccc9e1174c68f199060600160405180910390a2604051839033907f5f9b8953495be5098d89907c7dabd70cd5e678cebd9a9a13b140413bedefd28d90600090a350505050565b6000602081905290815260409020805481906110f990611b02565b80601f016020809104026020016040519081016040528092919081815260200182805461112590611b02565b80156111725780601f1061114757610100808354040283529160200191611172565b820191906000526020600020905b81548152906001019060200180831161115557829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b60408051600f80825281830190925260609160009190602082018180368337019050509050600560fc1b816000815181106111d5576111d5611c74565b60200101906001600160f81b031916908160001a905350601b60fa1b8160018151811061120457611204611c74565b60200101906001600160f81b031916908160001a905350606160f81b8160028151811061123357611233611c74565b60200101906001600160f81b031916908160001a905350607960f81b8160038151811061126257611262611c74565b60200101906001600160f81b031916908160001a905350606560f81b8160048151811061129157611291611c74565b60200101906001600160f81b031916908160001a905350603960f91b816005815181106112c0576112c0611c74565b60200101906001600160f81b031916908160001a905350605f60f81b816006815181106112ef576112ef611c74565b60200101906001600160f81b031916908160001a905350606083901b60005b60048110156113d157600082826010016014811061132e5761132e611c74565b1a905061134e600482901c6030600a821090810290910190156057020190565b84836002026007018151811061136657611366611c74565b60200101906001600160f81b031916908160001a90535061139981600f166030600a821090810290910190156057020190565b8483600202600801815181106113b1576113b1611c74565b60200101906001600160f81b031916908160001a9053505060010161130e565b50909392505050565b6001600160a01b03821660009081526004602052604090208054600a81106114df5760005b600182038110156114965782816001018154811061141f5761141f611c74565b906000526020600020906004020183828154811061143f5761143f611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018083015481830155600280840154908301556003928301549290910191909155016113ff565b50818054806114a7576114a7611d7a565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590555b508054600180820183556000928352602092839020845160049093020180546001600160a01b0319166001600160a01b0390931692909217825591830151918101919091556040820151600282015560609091015160039091015550565b6006546064811015611743576000611558836020015161182c565b604080516080810182526000808252602082018181529282018181526060830182815260068054600181018255935292517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490930292830180546001600160a01b0319166001600160a01b0390921691909117905592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42909101559050815b818111156116d9576006600182038154811061166357611663611c74565b90600052602060002090600402016006828154811061168457611684611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611645565b5082600682815481106116ee576116ee611c74565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b0390921691909117815590820151600182015560408201516002820155606090910151600390910155505050565b6006611750600183611da6565b8154811061176057611760611c74565b9060005260206000209060040201600101548260200151111561182857600061178c836020015161182c565b905060001982015b818111156116d957600660018203815481106117b2576117b2611c74565b9060005260206000209060040201600682815481106117d3576117d3611c74565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015560001901611794565b5050565b60065460009081905b8082101561189f576000600261184b8385611dbf565b6118559190611dd2565b9050846006828154811061186b5761186b611c74565b90600052602060002090600402016001015411156118955761188e816001611dbf565b9250611899565b8091505b50611835565b5092915050565b6000602082840312156118b857600080fd5b5035919050565b80356001600160a01b03811681146118d657600080fd5b919050565b6000602082840312156118ed57600080fd5b6118f6826118bf565b9392505050565b6000815180845260005b8181101561192357602081850181015186830182015201611907565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a0602084015261195f60c08401826118fd565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b600080604083850312156119a857600080fd5b6119b1836118bf565b91506119bf602084016118bf565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611a2857815180516001600160a01b031685528681015187860152858101518686015260609081015190850152608090930192908501906001016119e5565b5091979650505050505050565b60008060208385031215611a4857600080fd5b823567ffffffffffffffff80821115611a6057600080fd5b818501915085601f830112611a7457600080fd5b813581811115611a8357600080fd5b866020828501011115611a9557600080fd5b60209290920196919550909350505050565b60008060408385031215611aba57600080fd5b50508035926020909101359150565b60a081526000611adc60a08301886118fd565b905085602083015284604083015283606083015282151560808301529695505050505050565b600181811c90821680611b1657607f821691505b602082108103611b3657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115611b9c57600081815260208120601f850160051c81016020861015611b795750805b601f850160051c820191505b81811015611b9857828155600101611b85565b5050505b505050565b815167ffffffffffffffff811115611bbb57611bbb611b3c565b611bcf81611bc98454611b02565b84611b52565b602080601f831160018114611c045760008415611bec5750858301515b600019600386901b1c1916600185901b178555611b98565b600085815260208120601f198616915b82811015611c3357888601518255948401946001909101908401611c14565b5085821015611c515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006118f660208301846118fd565b634e487b7160e01b600052603260045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b67ffffffffffffffff831115611cd157611cd1611b3c565b611ce583611cdf8354611b02565b83611b52565b6000601f841160018114611d195760008515611d015750838201355b600019600387901b1c1916600186901b178355611d73565b600083815260209020601f19861690835b82811015611d4a5786850135825560209485019460019092019101611d2a565b5086821015611d675760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611db957611db9611d90565b92915050565b80820180821115611db957611db9611d90565b600082611def57634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000814000a",
  "devdoc": {
    "details": "Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.",
    "kind": "dev",
    "methods": {},
    "title": "MonadRunnerGame",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 83,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Player)55_storage)"
      },
      {
        "astId": 87,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "smartAccounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 91,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "replayExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 95,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "authorizedRelayers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 101,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerScoreHistory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(GameScore)64_storage)dyn_storage)"
      },
      {
        "astId": 104,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 108,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "topScores",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(GameScore)64_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GameScore)64_storage)dyn_storage": {
        "base": "t_struct(GameScore)64_storage",
        "encoding": "dynamic_array",
        "label": "struct MonadRunnerGame.GameScore[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(GameScore)64_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.GameScore[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(GameScore)64_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Player)55_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)55_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameScore)64_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.GameScore",
        "members": [
          {
            "astId": 57,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 59,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "score",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 61,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 63,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "replayHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)55_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.Player",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 48,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "highScore",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timesPlayed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "lastPlayed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 54,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}