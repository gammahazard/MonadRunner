{
  "address": "0x050A8691b3D7d31917bF1Bd7934a114B31282122",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidRelayerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSmartAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAuthorizedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegisteredPlayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayerDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReplayAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsernameTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "PlayerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ReplayDataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "ScoreSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "SmartAccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "UsernameChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "addRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "highScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timesPlayed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPlayed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MonadRunnerGame.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayerScoreHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopScores",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "replayHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MonadRunnerGame.GameScore[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "isAuthorizedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "highScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timesPlayed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPlayed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartAccount",
          "type": "address"
        }
      ],
      "name": "registerSmartAccountFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "removeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "replayExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "smartAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "storeReplayDataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "name": "submitScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "topScores",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "replayHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUsername",
          "type": "string"
        }
      ],
      "name": "updateUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b213a4c177943614cc0e8535d841437b540a1ef9982fd26ec89fbbe57c50f72",
  "receipt": {
    "to": null,
    "from": "0xe4bD25643625048D2F8657c0dA06EaD4757657B8",
    "contractAddress": "0x050A8691b3D7d31917bF1Bd7934a114B31282122",
    "transactionIndex": 28,
    "gasUsed": "1551453",
    "logsBloom": "0x
    "blockHash": "0x1f94dc8432be73709fe9fa7cb2d290e436fd5129950f1e644513de331a6c8a3b",
    "transactionHash": "0x0b213a4c177943614cc0e8535d841437b540a1ef9982fd26ec89fbbe57c50f72",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7815300,
        "transactionHash": "0x0b213a4c177943614cc0e8535d841437b540a1ef9982fd26ec89fbbe57c50f72",
        "address": "0x050A8691b3D7d31917bF1Bd7934a114B31282122",
        "topics": [
          "0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5",
          "0x000000000000000000000000e4bd25643625048d2f8657c0da06ead4757657b8"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x1f94dc8432be73709fe9fa7cb2d290e436fd5129950f1e644513de331a6c8a3b"
      }
    ],
    "blockNumber": 7815300,
    "cumulativeGasUsed": "3427263",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "690f561faeea024b37fea0a76d3e9357",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRelayerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSmartAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAuthorizedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegisteredPlayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReplayAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsernameTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ReplayDataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"ScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"SmartAccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"UsernameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MonadRunnerGame.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerScoreHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopScores\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MonadRunnerGame.GameScore[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isAuthorizedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"highScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPlayed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"registerSmartAccountFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"replayExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"smartAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"storeReplayDataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"name\":\"submitScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topScores\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"replayHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"}],\"name\":\"updateUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"MonadRunnerGame\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MonadRunnerGame.sol\":\"MonadRunnerGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MonadRunnerGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MonadRunnerGame\\n * @dev Smart contract for storing Monad Runner game data on-chain,\\n *      including registration of a smart account for account abstraction.\\n *      Optimized for minimal gas usage.\\n */\\ncontract MonadRunnerGame {\\n    // =============== EVENTS ===============\\n    event PlayerRegistered(address indexed playerAddress, string username);\\n    event UsernameChanged(address indexed playerAddress, string newUsername);\\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\\n    event SmartAccountRegistered(address indexed eoa, address smartAccount);\\n    event RelayerAdded(address indexed relayer);\\n    event RelayerRemoved(address indexed relayer);\\n\\n    // =============== STRUCTS ===============\\n    struct Player {\\n        string username;\\n        uint256 highScore;\\n        uint256 timesPlayed;\\n        uint256 lastPlayed;\\n        bool exists;\\n    }\\n\\n    struct GameScore {\\n        address playerAddress;\\n        uint256 score;\\n        uint256 timestamp;\\n        bytes32 replayHash;\\n    }\\n\\n    // =============== CONSTANTS ===============\\n    // Using constant for fixed values saves gas\\n    uint256 private constant MAX_LEADERBOARD_SIZE = 100;\\n    uint256 private constant MAX_USERNAME_LENGTH = 20;\\n    uint256 private constant MAX_PLAYER_SCORE_HISTORY = 10;\\n    \\n\\n    // =============== STATE VARIABLES ===============\\n    // Immutable variables cost less gas than regular state variables\\n    address public immutable owner;\\n    \\n    // Pack related data together when possible\\n    mapping(address => Player) public players;\\n    mapping(address => address) public smartAccounts;\\n    mapping(bytes32 => bool) public replayExists;\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    // Separate mappings for arrays to avoid storage bloat\\n    mapping(address => GameScore[]) private playerScoreHistory;\\n    address[] public playerAddresses;\\n    GameScore[] public topScores;\\n\\n    // =============== CONSTRUCTOR ===============\\n    constructor() {\\n        owner = msg.sender;\\n        // Add the deployer as the first authorized relayer\\n        authorizedRelayers[msg.sender] = true;\\n        emit RelayerAdded(msg.sender);\\n    }\\n\\n    // =============== MODIFIERS ===============\\n    // Use custom errors instead of revert strings to save gas\\n    error OnlyOwner();\\n    error OnlyRegisteredPlayer();\\n    error OnlyAuthorizedRelayer();\\n    error PlayerAlreadyRegistered();\\n    error PlayerDoesNotExist();\\n    error InvalidSmartAccount();\\n    error UsernameTooLong();\\n    error UsernameEmpty();\\n    error ReplayAlreadyExists();\\n    error InvalidRelayerAddress();\\n    error NotAnAuthorizedRelayer();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyRegisteredPlayer() {\\n        if (!players[msg.sender].exists) revert OnlyRegisteredPlayer();\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedRelayer() {\\n        if (!authorizedRelayers[msg.sender]) revert OnlyAuthorizedRelayer();\\n        _;\\n    }\\n\\n    // =============== ADMIN FUNCTIONS ===============\\n    function addRelayer(address relayer) external onlyOwner {\\n        if (relayer == address(0)) revert InvalidRelayerAddress();\\n        authorizedRelayers[relayer] = true;\\n        emit RelayerAdded(relayer);\\n    }\\n\\n    function removeRelayer(address relayer) external onlyOwner {\\n        if (!authorizedRelayers[relayer]) revert NotAnAuthorizedRelayer();\\n        authorizedRelayers[relayer] = false;\\n        emit RelayerRemoved(relayer);\\n    }\\n\\n    // =============== EXTERNAL FUNCTIONS ===============\\n    function registerPlayer(string calldata username) external {\\n        // Using calldata for string parameters saves gas when the function doesn't modify the string\\n        if (players[msg.sender].exists) revert PlayerAlreadyRegistered();\\n        \\n        uint256 len = bytes(username).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n\\n        // Initialize all fields directly to save gas\\n        players[msg.sender] = Player({\\n            username: username,\\n            highScore: 0,\\n            timesPlayed: 0,\\n            lastPlayed: 0,\\n            exists: true\\n        });\\n        \\n        playerAddresses.push(msg.sender);\\n        emit PlayerRegistered(msg.sender, username);\\n    }\\n\\n    function updateUsername(string calldata newUsername) external onlyRegisteredPlayer {\\n        uint256 len = bytes(newUsername).length;\\n        if (len == 0) revert UsernameEmpty();\\n        if (len > MAX_USERNAME_LENGTH) revert UsernameTooLong();\\n        \\n        players[msg.sender].username = newUsername;\\n        emit UsernameChanged(msg.sender, newUsername);\\n    }\\n\\n    function registerSmartAccount(address smartAccount) external onlyRegisteredPlayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        smartAccounts[msg.sender] = smartAccount;\\n        emit SmartAccountRegistered(msg.sender, smartAccount);\\n    }\\n\\n    function registerSmartAccountFor(address playerAddress, address smartAccount) external onlyAuthorizedRelayer {\\n        if (smartAccount == address(0)) revert InvalidSmartAccount();\\n        \\n        // Require that the player already exists\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        smartAccounts[playerAddress] = smartAccount;\\n        emit SmartAccountRegistered(playerAddress, smartAccount);\\n    }\\n\\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\\n        // Gas optimization: Use storage pointer\\n        Player storage player = players[msg.sender];\\n        \\n        // Unchecked math for gas optimization when overflow is impossible\\n        unchecked {\\n            player.timesPlayed++;\\n        }\\n        \\n        player.lastPlayed = block.timestamp;\\n        \\n        // Only update highScore if needed\\n        if (score > player.highScore) {\\n            player.highScore = score;\\n        }\\n        \\n        GameScore memory newScore = GameScore({\\n            playerAddress: msg.sender,\\n            score: score,\\n            timestamp: block.timestamp,\\n            replayHash: replayHash\\n        });\\n        \\n        replayExists[replayHash] = true;\\n        _addToPlayerScoreHistory(msg.sender, newScore);\\n        _updateLeaderboard(newScore);\\n        \\n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\\n        if (replayExists[replayHash]) revert ReplayAlreadyExists();\\n        replayExists[replayHash] = true;\\n        emit ReplayDataStored(msg.sender, replayHash);\\n    }\\n\\n    // =============== VIEW FUNCTIONS ===============\\n    function getPlayer(address playerAddress) external view returns (Player memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return players[playerAddress];\\n    }\\n\\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\\n        // Gas optimization: Avoid unnecessary copies\\n        uint256 actualCount = topScores.length;\\n        if (count > actualCount) {\\n            count = actualCount;\\n        }\\n        \\n        GameScore[] memory results = new GameScore[](count);\\n        \\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < count; i++) {\\n                results[i] = topScores[i];\\n            }\\n        }\\n        \\n        return results;\\n    }\\n\\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        return playerScoreHistory[playerAddress];\\n    }\\n\\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\\n        if (!players[playerAddress].exists) revert PlayerDoesNotExist();\\n        \\n        uint256 length = topScores.length;\\n        // Use unchecked when overflow is impossible (gas optimization)\\n        unchecked {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (topScores[i].playerAddress == playerAddress) {\\n                    return i + 1;\\n                }\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n\\n    function getPlayerCount() external view returns (uint256) {\\n        return playerAddresses.length;\\n    }\\n\\n    function isAuthorizedRelayer(address relayer) external view returns (bool) {\\n        return authorizedRelayers[relayer];\\n    }\\n\\n    // =============== INTERNAL FUNCTIONS ===============\\n    function _addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\\n        GameScore[] storage history = playerScoreHistory[playerAddress];\\n        uint256 length = history.length;\\n        \\n        if (length >= MAX_PLAYER_SCORE_HISTORY) {\\n            // Shift items to make room (gas optimization using unchecked)\\n            unchecked {\\n                for (uint256 i = 0; i < length - 1; i++) {\\n                    history[i] = history[i + 1];\\n                }\\n            }\\n            history.pop();\\n        }\\n        \\n        history.push(score);\\n    }\\n\\n    function _updateLeaderboard(GameScore memory newScore) internal {\\n        uint256 length = topScores.length;\\n        \\n        if (length < MAX_LEADERBOARD_SIZE) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            topScores.push(GameScore({\\n                playerAddress: address(0),\\n                score: 0,\\n                timestamp: 0,\\n                replayHash: bytes32(0)\\n            }));\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        } else if (newScore.score > topScores[length - 1].score) {\\n            uint256 pos = _findInsertionPosition(newScore.score);\\n            \\n            // Shift items to make room\\n            unchecked {\\n                for (uint256 i = length - 1; i > pos; i--) {\\n                    topScores[i] = topScores[i - 1];\\n                }\\n            }\\n            \\n            topScores[pos] = newScore;\\n        }\\n    }\\n\\n    function _findInsertionPosition(uint256 score) internal view returns (uint256) {\\n        uint256 left = 0;\\n        uint256 right = topScores.length;\\n        \\n        while (left < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (topScores[mid].score > score) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        \\n        return left;\\n    }\\n\\n}\",\"keccak256\":\"0xe88dd35adfede312fa1de7fc9c974148a5cc2042b5a58eb7bed30ad4cfdd03d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Smart contract for storing Monad Runner game data on-chain,      including registration of a smart account for account abstraction.      Optimized for minimal gas usage.",
    "kind": "dev",
    "methods": {},
    "title": "MonadRunnerGame",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 80,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Player)55_storage)"
      },
      {
        "astId": 84,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "smartAccounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 88,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "replayExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 92,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "authorizedRelayers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 98,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerScoreHistory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(GameScore)64_storage)dyn_storage)"
      },
      {
        "astId": 101,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "playerAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 105,
        "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
        "label": "topScores",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(GameScore)64_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GameScore)64_storage)dyn_storage": {
        "base": "t_struct(GameScore)64_storage",
        "encoding": "dynamic_array",
        "label": "struct MonadRunnerGame.GameScore[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(GameScore)64_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.GameScore[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(GameScore)64_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Player)55_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MonadRunnerGame.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)55_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameScore)64_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.GameScore",
        "members": [
          {
            "astId": 57,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 59,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "score",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 61,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 63,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "replayHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)55_storage": {
        "encoding": "inplace",
        "label": "struct MonadRunnerGame.Player",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 48,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "highScore",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "timesPlayed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "lastPlayed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 54,
            "contract": "contracts/MonadRunnerGame.sol:MonadRunnerGame",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}