{
  "language": "Solidity",
  "sources": {
    "contracts/MonadRunnerGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MonadRunnerGame\n * @dev Smart contract for storing Monad Runner game data on-chain,\n *      including registration of a smart account for account abstraction.\n */\ncontract MonadRunnerGame {\n    // =============== EVENTS ===============\n    event PlayerRegistered(address indexed playerAddress, string username);\n    event UsernameChanged(address indexed playerAddress, string newUsername);\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\n    event SmartAccountRegistered(address indexed eoa, address smartAccount);\n    event RelayerAdded(address indexed relayer);\n    event RelayerRemoved(address indexed relayer);\n\n    // =============== STRUCTS ===============\n    struct Player {\n        string username;\n        uint256 highScore;\n        uint256 timesPlayed;\n        uint256 lastPlayed;\n        bool exists;\n    }\n\n    struct GameScore {\n        address playerAddress;\n        uint256 score;\n        uint256 timestamp;\n        bytes32 replayHash; // Hash of replay data, can be used to verify off-chain replay data\n    }\n\n    // =============== STATE VARIABLES ===============\n    address public owner;\n    \n    // Mapping from EOA (player) address to Player struct.\n    mapping(address => Player) public players;\n    \n    // Mapping from EOA (player) to their registered smart account address.\n    mapping(address => address) public smartAccounts;\n    \n    // Array of registered EOA addresses (for enumeration).\n    address[] public playerAddresses;\n    \n    // Array of top scores for the leaderboard.\n    GameScore[] public topScores;\n    \n    // Maximum number of top scores to track.\n    uint256 public constant MAX_LEADERBOARD_SIZE = 100;\n    \n    // Maximum username length.\n    uint256 public constant MAX_USERNAME_LENGTH = 20;\n    \n    // Replay data storage (hash => exists).\n    mapping(bytes32 => bool) public replayExists;\n    \n    // Mapping from EOA to their game history (most recent scores).\n    mapping(address => GameScore[]) public playerScoreHistory;\n    \n    // Maximum number of scores to keep per player.\n    uint256 public constant MAX_PLAYER_SCORE_HISTORY = 10;\n\n    // Authorized relayers that can register smart accounts for players\n    mapping(address => bool) public authorizedRelayers;\n\n    // =============== CONSTRUCTOR ===============\n    constructor() {\n        owner = msg.sender;\n        // Add the deployer as the first authorized relayer\n        authorizedRelayers[msg.sender] = true;\n        emit RelayerAdded(msg.sender);\n    }\n\n    // =============== MODIFIERS ===============\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier onlyRegisteredPlayer() {\n        require(players[msg.sender].exists, \"Player not registered\");\n        _;\n    }\n\n    modifier onlyAuthorizedRelayer() {\n        require(authorizedRelayers[msg.sender], \"Not authorized relayer\");\n        _;\n    }\n\n    // =============== ADMIN FUNCTIONS ===============\n    /**\n     * @dev Add a new authorized relayer.\n     * @param relayer The address to authorize as a relayer.\n     */\n    function addRelayer(address relayer) external onlyOwner {\n        require(relayer != address(0), \"Invalid relayer address\");\n        authorizedRelayers[relayer] = true;\n        emit RelayerAdded(relayer);\n    }\n\n    /**\n     * @dev Remove an authorized relayer.\n     * @param relayer The address to remove as a relayer.\n     */\n    function removeRelayer(address relayer) external onlyOwner {\n        require(authorizedRelayers[relayer], \"Not an authorized relayer\");\n        authorizedRelayers[relayer] = false;\n        emit RelayerRemoved(relayer);\n    }\n\n    // =============== EXTERNAL FUNCTIONS ===============\n    /**\n     * @dev Register a new player with a username.\n     * @param username The player's username.\n     */\n    function registerPlayer(string memory username) external {\n        require(!players[msg.sender].exists, \"Player already registered\");\n        require(bytes(username).length > 0, \"Username cannot be empty\");\n        require(bytes(username).length <= MAX_USERNAME_LENGTH, \"Username too long\");\n\n        players[msg.sender] = Player({\n            username: username,\n            highScore: 0,\n            timesPlayed: 0,\n            lastPlayed: 0,\n            exists: true\n        });\n        playerAddresses.push(msg.sender);\n        emit PlayerRegistered(msg.sender, username);\n    }\n\n    /**\n     * @dev Update player's username.\n     * @param newUsername The new username.\n     */\n    function updateUsername(string memory newUsername) external onlyRegisteredPlayer {\n        require(bytes(newUsername).length > 0, \"Username cannot be empty\");\n        require(bytes(newUsername).length <= MAX_USERNAME_LENGTH, \"Username too long\");\n        \n        players[msg.sender].username = newUsername;\n        emit UsernameChanged(msg.sender, newUsername);\n    }\n\n    /**\n     * @dev Register the smart account (AA wallet) associated with the player's EOA.\n     * @param smartAccount The smart account address.\n     */\n    function registerSmartAccount(address smartAccount) external onlyRegisteredPlayer {\n        require(smartAccount != address(0), \"Invalid smart account address\");\n        smartAccounts[msg.sender] = smartAccount;\n        emit SmartAccountRegistered(msg.sender, smartAccount);\n    }\n\n    /**\n     * @dev Register a smart account on behalf of a player by an authorized relayer.\n     * @param playerAddress The player's EOA address.\n     * @param smartAccount The smart account address.\n     */\n    function registerSmartAccountFor(address playerAddress, address smartAccount) external onlyAuthorizedRelayer {\n        require(smartAccount != address(0), \"Invalid smart account address\");\n        \n        // For EIP-7702, if the player doesn't exist yet but the smart account\n        // is the same as the player address, register the player automatically\n        // with a default username\n        if (!players[playerAddress].exists && playerAddress == smartAccount) {\n            players[playerAddress] = Player({\n                username: _generateDefaultUsername(playerAddress),\n                highScore: 0,\n                timesPlayed: 0,\n                lastPlayed: 0,\n                exists: true\n            });\n            playerAddresses.push(playerAddress);\n            emit PlayerRegistered(playerAddress, players[playerAddress].username);\n        } else {\n            // Otherwise, require that the player already exists\n            require(players[playerAddress].exists, \"Player not registered\");\n        }\n        \n        smartAccounts[playerAddress] = smartAccount;\n        emit SmartAccountRegistered(playerAddress, smartAccount);\n    }\n\n    /**\n     * @dev Submit a game score.\n     * @param score The achieved score.\n     * @param replayHash The hash of the replay data.\n     */\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\n        Player storage player = players[msg.sender];\n        player.timesPlayed++;\n        player.lastPlayed = block.timestamp;\n        if (score > player.highScore) {\n            player.highScore = score;\n        }\n        \n        GameScore memory newScore = GameScore({\n            playerAddress: msg.sender,\n            score: score,\n            timestamp: block.timestamp,\n            replayHash: replayHash\n        });\n        \n        replayExists[replayHash] = true;\n        addToPlayerScoreHistory(msg.sender, newScore);\n        updateLeaderboard(newScore);\n        \n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\n        emit ReplayDataStored(msg.sender, replayHash);\n    }\n\n    /**\n     * @dev Store replay data hash for off-chain replay verification.\n     * @param replayHash The hash of the replay data.\n     */\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\n        require(!replayExists[replayHash], \"Replay hash already exists\");\n        replayExists[replayHash] = true;\n        emit ReplayDataStored(msg.sender, replayHash);\n    }\n\n    // =============== VIEW FUNCTIONS ===============\n    /**\n     * @dev Get player information.\n     * @param playerAddress The player's EOA address.\n     * @return Player data.\n     */\n    function getPlayer(address playerAddress) external view returns (Player memory) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        return players[playerAddress];\n    }\n\n    /**\n     * @dev Get the top scores (leaderboard).\n     * @param count Number of top scores to retrieve.\n     * @return Array of GameScore structs.\n     */\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\n        uint256 actualCount = topScores.length;\n        if (count > actualCount) {\n            count = actualCount;\n        }\n        GameScore[] memory results = new GameScore[](count);\n        for (uint256 i = 0; i < count; i++) {\n            results[i] = topScores[i];\n        }\n        return results;\n    }\n\n    /**\n     * @dev Get a player's score history.\n     * @param playerAddress The player's EOA address.\n     * @return Array of GameScore structs.\n     */\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        return playerScoreHistory[playerAddress];\n    }\n\n    /**\n     * @dev Get a player's rank on the leaderboard.\n     * @param playerAddress The player's EOA address.\n     * @return The player's rank (1-based) or 0 if not on the leaderboard.\n     */\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        for (uint256 i = 0; i < topScores.length; i++) {\n            if (topScores[i].playerAddress == playerAddress) {\n                return i + 1;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * @dev Get total number of registered players.\n     * @return The count of registered players.\n     */\n    function getPlayerCount() external view returns (uint256) {\n        return playerAddresses.length;\n    }\n\n    /**\n     * @dev Check if a relayer is authorized.\n     * @param relayer The address to check.\n     * @return Whether the relayer is authorized.\n     */\n    function isAuthorizedRelayer(address relayer) external view returns (bool) {\n        return authorizedRelayers[relayer];\n    }\n\n    // =============== INTERNAL FUNCTIONS ===============\n    /**\n     * @dev Add a score to a player's history, keeping only recent scores.\n     * @param playerAddress The player's EOA address.\n     * @param score The game score to add.\n     */\n    function addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\n        GameScore[] storage history = playerScoreHistory[playerAddress];\n        if (history.length >= MAX_PLAYER_SCORE_HISTORY) {\n            for (uint256 i = 0; i < history.length - 1; i++) {\n                history[i] = history[i + 1];\n            }\n            history.pop();\n        }\n        history.push(score);\n    }\n\n    /**\n     * @dev Update the leaderboard with a new score if it qualifies.\n     * @param newScore The new game score.\n     */\n    function updateLeaderboard(GameScore memory newScore) internal {\n        if (topScores.length < MAX_LEADERBOARD_SIZE) {\n            uint256 pos = findInsertionPosition(newScore.score);\n            topScores.push(GameScore({\n                playerAddress: address(0),\n                score: 0,\n                timestamp: 0,\n                replayHash: bytes32(0)\n            }));\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\n                topScores[i] = topScores[i - 1];\n            }\n            topScores[pos] = newScore;\n        } else if (newScore.score > topScores[topScores.length - 1].score) {\n            uint256 pos = findInsertionPosition(newScore.score);\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\n                topScores[i] = topScores[i - 1];\n            }\n            topScores[pos] = newScore;\n        }\n    }\n\n    /**\n     * @dev Find the position to insert a new score using binary search.\n     * @param score The new score.\n     * @return The insertion index.\n     */\n    function findInsertionPosition(uint256 score) internal view returns (uint256) {\n        uint256 left = 0;\n        uint256 right = topScores.length;\n        while (left < right) {\n            uint256 mid = left + (right - left) / 2;\n            if (topScores[mid].score > score) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n\n    /**\n     * @dev Generate a default username for a player based on their address.\n     * @param playerAddress The player's address.\n     * @return A default username.\n     */\n    function _generateDefaultUsername(address playerAddress) internal pure returns (string memory) {\n        bytes memory addressBytes = abi.encodePacked(playerAddress);\n        bytes memory result = new bytes(8);\n        \n        // Take the last 4 bytes of the address and convert to hex\n        for (uint i = 0; i < 4; i++) {\n            uint8 value = uint8(addressBytes[addressBytes.length - 4 + i]);\n            uint8 hi = uint8(value / 16);\n            uint8 lo = uint8(value % 16);\n            \n            result[i*2] = _getHexChar(hi);\n            result[i*2 + 1] = _getHexChar(lo);\n        }\n        \n        return string(abi.encodePacked(\"Player_\", result));\n    }\n    \n    /**\n     * @dev Helper function to convert a number to a hex character.\n     * @param value The value to convert (0-15).\n     * @return The hex character.\n     */\n    function _getHexChar(uint8 value) internal pure returns (bytes1) {\n        if (value < 10) {\n            return bytes1(uint8(48 + value)); // 0-9\n        } else {\n            return bytes1(uint8(87 + value)); // a-f\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}