{
  "language": "Solidity",
  "sources": {
    "contracts/MonadRunnerGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MonadRunnerGame\n * @dev Smart contract for storing Monad Runner game data on-chain\n */\ncontract MonadRunnerGame {\n    // =============== EVENTS ===============\n    event PlayerRegistered(address indexed playerAddress, string username);\n    event UsernameChanged(address indexed playerAddress, string newUsername);\n    event ScoreSubmitted(address indexed playerAddress, uint256 score, uint256 timestamp, bytes32 replayHash);\n    event ReplayDataStored(address indexed playerAddress, bytes32 indexed replayHash);\n\n    // =============== STRUCTS ===============\n    struct Player {\n        string username;\n        uint256 highScore;\n        uint256 timesPlayed;\n        uint256 lastPlayed;\n        bool exists;\n    }\n\n    struct GameScore {\n        address playerAddress;\n        uint256 score;\n        uint256 timestamp;\n        bytes32 replayHash; // Hash of replay data, can be used to verify off-chain replay data\n    }\n\n    // =============== STATE VARIABLES ===============\n    // Game owner (deployer)\n    address public owner;\n    \n    // Mapping from player address to Player struct\n    mapping(address => Player) public players;\n    \n    // Array of player addresses (for enumeration)\n    address[] public playerAddresses;\n    \n    // Array of top scores for the leaderboard\n    GameScore[] public topScores;\n    \n    // Maximum number of top scores to track (leaderboard size)\n    uint256 public constant MAX_LEADERBOARD_SIZE = 100;\n    \n    // Maximum username length\n    uint256 public constant MAX_USERNAME_LENGTH = 20;\n    \n    // Replay data storage (hash => exists)\n    mapping(bytes32 => bool) public replayExists;\n    \n    // Mapping from player to their game history (most recent scores)\n    mapping(address => GameScore[]) public playerScoreHistory;\n    \n    // Maximum number of scores to keep per player\n    uint256 public constant MAX_PLAYER_SCORE_HISTORY = 10;\n\n    // =============== CONSTRUCTOR ===============\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // =============== MODIFIERS ===============\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier onlyRegisteredPlayer() {\n        require(players[msg.sender].exists, \"Player not registered\");\n        _;\n    }\n\n    // =============== EXTERNAL FUNCTIONS ===============\n    /**\n     * @dev Register a new player with a username\n     * @param username The player's username\n     */\n    function registerPlayer(string memory username) external {\n        require(!players[msg.sender].exists, \"Player already registered\");\n        require(bytes(username).length > 0, \"Username cannot be empty\");\n        require(bytes(username).length <= MAX_USERNAME_LENGTH, \"Username too long\");\n\n        players[msg.sender] = Player({\n            username: username,\n            highScore: 0,\n            timesPlayed: 0,\n            lastPlayed: 0,\n            exists: true\n        });\n        \n        playerAddresses.push(msg.sender);\n        emit PlayerRegistered(msg.sender, username);\n    }\n\n    /**\n     * @dev Update player's username\n     * @param newUsername The new username\n     */\n    function updateUsername(string memory newUsername) external onlyRegisteredPlayer {\n        require(bytes(newUsername).length > 0, \"Username cannot be empty\");\n        require(bytes(newUsername).length <= MAX_USERNAME_LENGTH, \"Username too long\");\n        \n        players[msg.sender].username = newUsername;\n        emit UsernameChanged(msg.sender, newUsername);\n    }\n\n    /**\n     * @dev Submit a game score\n     * @param score The score achieved\n     * @param replayHash Hash of the replay data\n     */\n    function submitScore(uint256 score, bytes32 replayHash) external onlyRegisteredPlayer {\n        // Update player stats\n        Player storage player = players[msg.sender];\n        player.timesPlayed++;\n        player.lastPlayed = block.timestamp;\n        \n        // Check if this is a new high score for the player\n        if (score > player.highScore) {\n            player.highScore = score;\n        }\n        \n        // Create game score entry\n        GameScore memory newScore = GameScore({\n            playerAddress: msg.sender,\n            score: score,\n            timestamp: block.timestamp,\n            replayHash: replayHash\n        });\n        \n        // Record this hash as existing\n        replayExists[replayHash] = true;\n        \n        // Add to player's score history (most recent scores)\n        addToPlayerScoreHistory(msg.sender, newScore);\n        \n        // Add to leaderboard if qualified\n        updateLeaderboard(newScore);\n        \n        // Emit events\n        emit ScoreSubmitted(msg.sender, score, block.timestamp, replayHash);\n        emit ReplayDataStored(msg.sender, replayHash);\n    }\n\n    /**\n     * @dev Store replay data hash - this allows verification of off-chain replay data\n     * @param replayHash Hash of the replay data\n     */\n    function storeReplayDataHash(bytes32 replayHash) external onlyRegisteredPlayer {\n        require(!replayExists[replayHash], \"Replay hash already exists\");\n        \n        replayExists[replayHash] = true;\n        emit ReplayDataStored(msg.sender, replayHash);\n    }\n\n    // =============== VIEW FUNCTIONS ===============\n    /**\n     * @dev Get player information\n     * @param playerAddress The address of the player\n     * @return Player data struct\n     */\n    function getPlayer(address playerAddress) external view returns (Player memory) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        return players[playerAddress];\n    }\n\n    /**\n     * @dev Get the top scores (leaderboard)\n     * @param count Number of top scores to retrieve\n     * @return Array of GameScore structs\n     */\n    function getTopScores(uint256 count) external view returns (GameScore[] memory) {\n        // If count is greater than leaderboard size or actual entries, adjust it\n        uint256 actualCount = topScores.length;\n        if (count > actualCount) {\n            count = actualCount;\n        }\n        \n        GameScore[] memory results = new GameScore[](count);\n        for (uint256 i = 0; i < count; i++) {\n            results[i] = topScores[i];\n        }\n        \n        return results;\n    }\n\n    /**\n     * @dev Get a player's score history\n     * @param playerAddress The address of the player\n     * @return Array of GameScore structs\n     */\n    function getPlayerScoreHistory(address playerAddress) external view returns (GameScore[] memory) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        return playerScoreHistory[playerAddress];\n    }\n\n    /**\n     * @dev Get a player's rank on the leaderboard\n     * @param playerAddress The address of the player\n     * @return Player rank (1-based) or 0 if not on leaderboard\n     */\n    function getPlayerRank(address playerAddress) external view returns (uint256) {\n        require(players[playerAddress].exists, \"Player does not exist\");\n        \n        for (uint256 i = 0; i < topScores.length; i++) {\n            if (topScores[i].playerAddress == playerAddress) {\n                return i + 1; // Return 1-based rank\n            }\n        }\n        \n        return 0; // Not on the leaderboard\n    }\n\n    /**\n     * @dev Get total number of registered players\n     * @return Number of players\n     */\n    function getPlayerCount() external view returns (uint256) {\n        return playerAddresses.length;\n    }\n\n    // =============== INTERNAL FUNCTIONS ===============\n    /**\n     * @dev Add a score to the player's score history, keeping only recent ones\n     * @param playerAddress The player's address\n     * @param score The game score to add\n     */\n    function addToPlayerScoreHistory(address playerAddress, GameScore memory score) internal {\n        GameScore[] storage history = playerScoreHistory[playerAddress];\n        \n        // If history is at max capacity, remove oldest entry\n        if (history.length >= MAX_PLAYER_SCORE_HISTORY) {\n            // Shift elements left, removing the oldest\n            for (uint256 i = 0; i < history.length - 1; i++) {\n                history[i] = history[i + 1];\n            }\n            history.pop(); // Remove the last element\n        }\n        \n        // Add new score at the end (most recent)\n        history.push(score);\n    }\n\n    /**\n     * @dev Update the leaderboard with a new score if it qualifies\n     * @param newScore The new score to potentially add to the leaderboard\n     */\n    function updateLeaderboard(GameScore memory newScore) internal {\n        // If leaderboard is not full, just add the new score\n        if (topScores.length < MAX_LEADERBOARD_SIZE) {\n            // Find the position to insert the new score\n            uint256 pos = findInsertionPosition(newScore.score);\n            \n            // Make space for the new score\n            topScores.push(GameScore({\n                playerAddress: address(0),\n                score: 0,\n                timestamp: 0,\n                replayHash: bytes32(0)\n            }));\n            \n            // Shift elements to make space at pos\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\n                topScores[i] = topScores[i - 1];\n            }\n            \n            // Insert the new score\n            topScores[pos] = newScore;\n        } \n        // If leaderboard is full but new score is higher than the lowest\n        else if (newScore.score > topScores[topScores.length - 1].score) {\n            // Find the position to insert the new score\n            uint256 pos = findInsertionPosition(newScore.score);\n            \n            // Shift elements to make space at pos\n            for (uint256 i = topScores.length - 1; i > pos; i--) {\n                topScores[i] = topScores[i - 1];\n            }\n            \n            // Insert the new score\n            topScores[pos] = newScore;\n        }\n    }\n\n    /**\n     * @dev Find the position to insert a new score in the leaderboard\n     * @param score The score to find a position for\n     * @return The index where the score should be inserted\n     */\n    function findInsertionPosition(uint256 score) internal view returns (uint256) {\n        // Binary search to find insertion position\n        uint256 left = 0;\n        uint256 right = topScores.length;\n        \n        while (left < right) {\n            uint256 mid = left + (right - left) / 2;\n            \n            if (topScores[mid].score > score) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return left;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}